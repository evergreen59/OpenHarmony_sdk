# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/notification/distributed_notification_service/notification.gni")
import("//build/ohos.gni")

group("ans_client") {
  deps = [ ":ans_innerkits" ]
}

config("ans_innerkits_public_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "${inner_api_path}",
    "${core_path}/common/include",
    "${core_path}/include",
    "//third_party/json/single_include",
    "//utils/system/safwk/native/include",
  ]
  configs = [
    "${ability_runtime_inner_api_path}/wantagent:wantagent_innerkits_public_config",
    "//foundation/multimedia/image_framework/interfaces/innerkits:image_external_config",
  ]
}

ohos_shared_library("ans_innerkits") {
  include_dirs = [
    "${inner_api_path}",
    "//utils/system/safwk/native/include",
  ]

  sources = [
    "src/enabled_notification_callback_data.cpp",
    "src/message_user.cpp",
    "src/notification.cpp",
    "src/notification_action_button.cpp",
    "src/notification_basic_content.cpp",
    "src/notification_bundle_option.cpp",
    "src/notification_content.cpp",
    "src/notification_conversational_content.cpp",
    "src/notification_conversational_message.cpp",
    "src/notification_distributed_options.cpp",
    "src/notification_do_not_disturb_date.cpp",
    "src/notification_flags.cpp",
    "src/notification_helper.cpp",
    "src/notification_long_text_content.cpp",
    "src/notification_media_content.cpp",
    "src/notification_multiline_content.cpp",
    "src/notification_normal_content.cpp",
    "src/notification_picture_content.cpp",
    "src/notification_request.cpp",
    "src/notification_slot.cpp",
    "src/notification_sorting.cpp",
    "src/notification_sorting_map.cpp",
    "src/notification_subscribe_info.cpp",
    "src/notification_subscriber.cpp",
    "src/notification_template.cpp",
    "src/notification_user_input.cpp",
  ]

  configs = [
    "//commonlibrary/c_utils/base:utils_config",
    "${core_path}:public_ans_core_config",
  ]

  public_configs = [ ":ans_innerkits_public_config" ]

  deps = [ "${core_path}:ans_core" ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:wantagent_innerkits",
    "c_utils:utils",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "multimedia_image_framework:image_native",
    "relational_store:native_rdb",
    "samgr:samgr_proxy",
  ]

  if (is_double_framework) {
    cflags = [ "-DCONFIG_DUAL_FRAMEWORK" ]
  }

  subsystem_name = "${subsystem_name}"
  part_name = "${component_name}"
}
