# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/powermgr/thermal_manager/thermalmgr.gni")
import("//build/test.gni")

module_output_path = "thermal_manager/thermal_native"

###############################################################################
config("module_private_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "../mock_client/include",
    "include",
    "mock/include",
    "${utils_path}/native/include",
    "${thermal_service_zidl}/include",
    "${ability_runtime_services_path}/appmgr/include",
    "${thermal_innerkits}/native/include",
  ]
}

deps_ex = [
  "ability_base:base",
  "ability_base:want",
  "battery_manager:batterysrv_client",
  "bundle_framework:appexecfwk_base",
  "c_utils:utils",
  "eventhandler:libeventhandler",
  "ipc:ipc_core",
  "hdf_core:libhdi",
  "hiviewdfx_hilog_native:libhilog",
  "power_manager:powermgr_client",
  "safwk:system_ability_fwk",
  "samgr:samgr_proxy",
  "common_event_service:cesfwk_innerkits",
  "appspawn:appspawn_socket_client",
  "window_manager:libwm",
  "drivers_interface_thermal:libthermal_proxy_1.0",
]

# thermal service test
ohos_unittest("ThermalPolicyTest") {
  module_out_path = module_output_path

  sources = [ "src/thermal_mgr_policy_test.cpp" ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_manager_path}/services/native/test/mock_client:mock_thermalsrv_client",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal level event test
ohos_unittest("ThermalLevelEventTest") {
  module_out_path = module_output_path

  sources = [ "src/thermal_level_event_test.cpp" ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_manager_path}/services/native/test/mock_client:mock_thermalsrv_client",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal client api test
ohos_unittest("ThermalClientApiTest") {
  module_out_path = module_output_path

  sources = [ "src/thermal_client_api_test.cpp" ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_manager_path}/services/native/test/mock_client:mock_thermalsrv_client",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal action hub test
ohos_unittest("ThermalActionHubTest") {
  module_out_path = module_output_path

  sources = [ "src/thermal_action_hub_test.cpp" ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_manager_path}/services/native/test/mock_client:mock_thermalsrv_client",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal action report test
ohos_unittest("ThermalActionReportTest") {
  module_out_path = module_output_path

  sources = [
    "src/thermal_action_report_test.cpp",
    "src/thermal_config_file_parser.cpp",
  ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_manager_path}/services/native/test/mock_client:mock_thermalsrv_client",
    "//base/powermgr/battery_statistics/interfaces/innerkits:batterystats_client",
    "//base/powermgr/battery_statistics/utils:batterystats_utils",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//third_party/googletest:gtest_main",
    "//third_party/libxml2:libxml2",
  ]

  external_deps = deps_ex
}

# thermal mock proxy test
ohos_unittest("ThermalMockProxyTest") {
  module_out_path = module_output_path

  sources = [
    "mock/src/mock_thermal_remote_object.cpp",
    "src/thermal_mock_proxy_test.cpp",
  ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal mock proxy remote test
ohos_unittest("ThermalMockProxyRemoteTest") {
  module_out_path = module_output_path

  sources = [
    "mock/src/mock_peer_holder.cpp",
    "mock/src/mock_thermal_remote_object.cpp",
    "src/thermal_mock_proxy_remote_test.cpp",
  ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal mock proxy writeinterfacetoken test
ohos_unittest("ThermalMockProxyWriteinterfacetokenTest") {
  module_out_path = module_output_path

  sources = [
    "mock/src/mock_message_parcel.cpp",
    "mock/src/mock_thermal_remote_object.cpp",
    "src/thermal_mock_proxy_writeinterfacetoken_test.cpp",
  ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  defines = [ "MOCK_WRITE_INTERFACE_TOKEN_RETURN_FALSE" ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal mock proxy writeremoteobject test
ohos_unittest("ThermalMockProxyWriteremoteobjectTest") {
  module_out_path = module_output_path

  sources = [
    "mock/src/mock_message_parcel.cpp",
    "mock/src/mock_parcel.cpp",
    "mock/src/mock_thermal_remote_object.cpp",
    "src/thermal_mock_proxy_writeremoteobject_test.cpp",
  ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  defines = [ "MOCK_WRITE_REMOTE_OBJECT_RETURN_FALSE" ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal mock proxy writevector test
ohos_unittest("ThermalMockProxyWritevectorTest") {
  module_out_path = module_output_path

  sources = [
    "mock/src/mock_message_parcel.cpp",
    "mock/src/mock_parcel.cpp",
    "mock/src/mock_thermal_remote_object.cpp",
    "src/thermal_mock_proxy_writevector_test.cpp",
  ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  defines = [ "MOCK_WRITEVECTOR_RETURN_FALSE" ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal mock proxy sendrequest test
ohos_unittest("ThermalMockProxySendrequestTest") {
  module_out_path = module_output_path

  sources = [
    "mock/src/mock_message_parcel.cpp",
    "mock/src/mock_thermal_remote_object.cpp",
    "src/thermal_mock_proxy_sendrequest_test.cpp",
  ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  defines = [ "MOCK_SEND_REQUEST_RETURN_ONE" ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal utils test
ohos_unittest("ThermalUtilsTest") {
  module_out_path = module_output_path

  sources = [ "src/thermal_utils_test.cpp" ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal service death test
ohos_unittest("ThermalServiceDeathTest") {
  module_out_path = module_output_path

  sources = [
    "mock/src/mock_thermal_remote_object.cpp",
    "src/thermal_service_death_test.cpp",
  ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  defines = [ "THERMAL_SERVICE_DEATH_UT" ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal listener test
ohos_unittest("ThermalListenerTest") {
  module_out_path = module_output_path

  sources = [ "src/thermal_listener_test.cpp" ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalmgr_listener",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_manager_path}/services/native/test/mock_client:mock_thermalsrv_client",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal client test
ohos_unittest("ThermalClientTest") {
  module_out_path = module_output_path

  sources = [
    "mock/src/mock_thermal_remote_object.cpp",
    "src/thermal_client_test.cpp",
  ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalmgr_listener",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//third_party/googletest:gtest_main",
    "//third_party/libxml2:libxml2",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "appspawn:appspawn_socket_client",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "drivers_interface_thermal:libthermal_proxy_1.0",
    "eventhandler:libeventhandler",
    "hdf_core:libhdi",
    "hisysevent_native:libhisysevent",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "power_manager:powermgr_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libwm",
  ]
}

# thermal mock stub test
ohos_unittest("ThermalMockStubTest") {
  module_out_path = module_output_path

  sources = [
    "mock/src/mock_thermal_remote_object.cpp",
    "src/thermal_mock_stub_test.cpp",
  ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal mock stub getdescriptor test
ohos_unittest("ThermalMockStubGetdescriptorTest") {
  module_out_path = module_output_path

  sources = [
    "mock/src/mock_message_parcel.cpp",
    "mock/src/mock_parcel.cpp",
    "mock/src/mock_thermal_remote_object.cpp",
    "src/thermal_mock_stub_getdescriptor_test.cpp",
  ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal mock stub readstring test
ohos_unittest("ThermalMockStubReadstringTest") {
  module_out_path = module_output_path

  sources = [
    "mock/src/mock_message_parcel.cpp",
    "mock/src/mock_parcel.cpp",
    "mock/src/mock_thermal_remote_object.cpp",
    "src/thermal_mock_stub_test.cpp",
  ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  defines = [
    "MOCK_READ_RETURN_ZERO",
    "MOCK_READSTRING_RETURN_TRUE",
    "MOCK_READSTRING16_RETURN_NULL",
    "MOCK_WRITEVECTOR_RETURN_TRUE",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

group("unittest") {
  testonly = true
  deps = [
    ":ThermalActionHubTest",
    ":ThermalActionReportTest",
    ":ThermalClientApiTest",
    ":ThermalClientTest",
    ":ThermalLevelEventTest",
    ":ThermalListenerTest",
    ":ThermalMockProxyRemoteTest",
    ":ThermalMockProxySendrequestTest",
    ":ThermalMockProxyTest",
    ":ThermalMockProxyWriteinterfacetokenTest",
    ":ThermalMockProxyWriteremoteobjectTest",
    ":ThermalMockProxyWritevectorTest",
    ":ThermalMockStubGetdescriptorTest",
    ":ThermalMockStubReadstringTest",
    ":ThermalMockStubTest",
    ":ThermalPolicyTest",
    ":ThermalServiceDeathTest",
    ":ThermalUtilsTest",
  ]
}
