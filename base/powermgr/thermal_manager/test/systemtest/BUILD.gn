# Copyright (C) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/powermgr/thermal_manager/thermalmgr.gni")
import("//build/test.gni")

module_output_path = "thermal_manager/thermal_native"

deps_ex = [
  "appspawn:appspawn_socket_client",
  "ability_base:base",
  "ability_base:want",
  "bundle_framework:appexecfwk_base",
  "common_event_service:cesfwk_innerkits",
  "c_utils:utils",
  "drivers_interface_thermal:libthermal_proxy_1.0",
  "eventhandler:libeventhandler",
  "hiviewdfx_hilog_native:libhilog",
  "ipc:ipc_core",
  "power_manager:powermgr_client",
  "safwk:system_ability_fwk",
  "samgr:samgr_proxy",
]

ohos_systemtest("ThermalMgrInterfaceTest") {
  module_out_path = "${module_output_path}"

  sources = [ "src/thermal_mgr_interface_test.cpp" ]

  configs = [ "${utils_path}:utils_config" ]

  include_dirs = [
    "include",
    "${thermal_manager_path}/services/native/include",
    "${thermal_manager_path}/services/native/include/thermal_action",
    "${thermal_manager_path}/services/native/include/thermal_observer",
    "${thermal_manager_path}/services/native/include/thermal_policy",
    "${thermal_manager_path}/services/native/include/thermal_observer/state_machine",
    "${thermal_manager_path}/services/native/include/thermal_action/action",
    "${thermal_manager_path}/services/zidl/include",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = deps_ex
}

ohos_systemtest("ThermalMgrSystemTest") {
  module_out_path = "${module_output_path}"

  sources = [ "src/thermal_mgr_system_test.cpp" ]

  configs = [ "${utils_path}:utils_config" ]

  include_dirs = [
    "include",
    "${thermal_manager_path}/services/zidl/include",
    "${thermal_manager_path}/services/native/include",
    "${thermal_manager_path}/services/native/include/thermal_action",
    "${thermal_manager_path}/services/native/include/thermal_observer",
    "${thermal_manager_path}/services/native/include/thermal_policy",
    "${thermal_manager_path}/services/native/include/thermal_observer/state_machine",
    "${thermal_manager_path}/services/native/include/thermal_action/action",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_manager_path}/services:thermalservice",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = deps_ex
}

ohos_systemtest("ThermalMgrDialogTest") {
  module_out_path = "${module_output_path}"

  sources = [ "src/thermal_mgr_dialog_test.cpp" ]

  configs = [ "${utils_path}:utils_config" ]

  include_dirs = [
    "include",
    "${thermal_manager_path}/services/zidl/include",
    "${thermal_manager_path}/services/native/include",
    "${thermal_manager_path}/services/native/include/thermal_action",
    "${thermal_manager_path}/services/native/include/thermal_observer",
    "${thermal_manager_path}/services/native/include/thermal_policy",
    "${thermal_manager_path}/services/native/include/thermal_observer/state_machine",
    "${thermal_manager_path}/services/native/include/thermal_action/action",
  ]

  deps = [
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "${utils_path}:thermal_utils",
    "//base/powermgr/thermal_manager/services:thermalservice",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//third_party/libxml2:xml2",
  ]
  external_deps = deps_ex
}

group("systemtest") {
  testonly = true

  deps = [
    ":ThermalMgrDialogTest",
    ":ThermalMgrInterfaceTest",
    ":ThermalMgrSystemTest",
  ]
}
