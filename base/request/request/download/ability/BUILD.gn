# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/request/request/request_aafwk.gni")
import("//build/lite/config/component/lite_component.gni")
import("//build/ohos.gni")

## Build download_dataability.hap
ohos_hap("download_dataability") {
  hap_profile = "./config.json"
  shared_libraries = [ ":downloaddataability" ]
  certificate_profile = "./signature/profile.p7b"
  hap_name = "download_dataability"
  part_name = "request"
  subsystem_name = "request"
  module_install_dir = "app/com.ohos.download"
}

## Build downloaddataability.so {{{
config("downloaddataability_public_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "//third_party/node/src",
    "include",
  ]
  ldflags = [ "-Wl,--exclude-libs=ALL" ]
  cflags = [
    "-fdata-sections",
    "-ffunction-sections",
    "-fvisibility=hidden",
  ]
}

ohos_shared_library("downloaddataability") {
  sources = [
    "src/common_event.cpp",
    "src/db_path.cpp",
    "src/download_data_ability.cpp",
    "src/download_database.cpp",
    "src/file_utils.cpp",
    "src/predicates_convert.cpp",
    "src/sql_analyzer.cpp",
    "src/uri_utils.cpp",
  ]
  include_dirs = [
    "//commonlibrary/c_utils/base/include",
    "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
    "//third_party/jsoncpp",
    "//third_party/jsoncpp/include/json",
    "//base/account/os_account/interfaces/innerkits/ohosaccount/native/include/",
    "//base/account/os_account/interfaces/kits/napi/distributedaccount/include/",
    "//base/account/os_account/interfaces/innerkits/include",
    "${ability_runtime_inner_api_path}/ability_manager/include",
    "${ability_runtime_services_path}/abilitymgr/include",
    "${ability_runtime_path}/interfaces/kits/native/ability/native",
    "//base/request/request/download/utils/include",
  ]

  deps = [
    "${ability_runtime_path}/frameworks/native/ability/native:abilitykit_native",
    "//third_party/jsoncpp:jsoncpp",
  ]

  public_configs = [ ":downloaddataability_public_config" ]
  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "c_utils:utilsbase",
    "common_event_service:cesfwk_innerkits",
    "relational_store:native_dataability",
    "relational_store:native_rdb",
  ]
  if (is_standard_system) {
    external_deps += [ "hiviewdfx_hilog_native:libhilog" ]
  } else {
    external_deps += [ "hilog:libhilog" ]
  }

  public_deps = []
  relative_install_dir = "module"
  part_name = "request"
  subsystem_name = "request"
}
## Build downloaddataability.so }}}
