# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")

ohos_unittest("libprivacy_sdk_test") {
  subsystem_name = "security"
  part_name = "access_token"
  module_out_path = part_name + "/" + part_name

  include_dirs = [
    "//commonlibrary/c_utils/base/include",
    "//base/security/access_token/frameworks/privacy/include",
    "//base/security/access_token/interfaces/innerkits/accesstoken/include",
    "//base/security/access_token/interfaces/innerkits/nativetoken/include",
    "//base/security/access_token/interfaces/innerkits/privacy/include",
    "//base/security/access_token/interfaces/innerkits/privacy/src",
    "//base/security/access_token/interfaces/innerkits/token_setproc/include",
    "//third_party/googletest/include",
  ]

  sources = [
    "unittest/src/permission_deny_test.cpp",
    "unittest/src/privacy_kit_test.cpp",
  ]

  cflags_cc = [ "-DHILOG_ENABLE" ]

  configs = [ "//base/security/access_token/config:coverage_flags" ]

  deps = [
    "//base/security/access_token/frameworks/privacy:privacy_communication_adapter_cxx",
    "//base/security/access_token/interfaces/innerkits/accesstoken:libaccesstoken_sdk",
    "//base/security/access_token/interfaces/innerkits/nativetoken:libnativetoken",
    "//base/security/access_token/interfaces/innerkits/privacy:libprivacy_sdk",
    "//base/security/access_token/interfaces/innerkits/token_setproc:libtoken_setproc",
  ]
  external_deps = [
    "c_utils:utils",
    "init:libbegetutil",
    "ipc:ipc_core",
  ]
}

ohos_unittest("libprivacy_mock_test") {
  subsystem_name = "security"
  part_name = "access_token"
  module_out_path = part_name + "/" + part_name

  include_dirs = [
    "//commonlibrary/c_utils/base/include",
    "//third_party/googletest/include",
    "//base/security/access_token/frameworks/common/include",
    "//base/security/access_token/frameworks/accesstoken/include",
    "//base/security/access_token/frameworks/tokensync/include",
    "//base/security/access_token/interfaces/innerkits/accesstoken/include",
    "//base/security/access_token/interfaces/innerkits/nativetoken/include",
    "//foundation/systemabilitymgr/safwk/interfaces/innerkits/safwk",
    "//foundation/systemabilitymgr/samgr/interfaces/innerkits/common/include",
    "//foundation/systemabilitymgr/samgr/interfaces/innerkits/samgr_proxy/include",
    "//foundation/systemabilitymgr/samgr/services/samgr/native/include",
    "//foundation/systemabilitymgr/samgr/services/samgr/dfx/include",
    "//foundation/systemabilitymgr/samgr/services/samgr/lsamgr/include",
  ]

  sources = [
    "//base/security/access_token/interfaces/innerkits/privacy/test/mock/src/iservice_registry.cpp",
    "//base/security/access_token/interfaces/innerkits/privacy/test/unittest/privacy_mock_test/privacy_kit_test.cpp",
  ]

  configs = [ "//base/security/access_token/config:coverage_flags" ]

  deps = [
    "//base/security/access_token/interfaces/innerkits/accesstoken:libaccesstoken_sdk",
    "//base/security/access_token/interfaces/innerkits/nativetoken:libnativetoken",
    "//base/security/access_token/interfaces/innerkits/privacy:libprivacy_sdk",
    "//base/security/access_token/interfaces/innerkits/token_setproc:libtoken_setproc",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:libdbinder",
    "safwk:system_ability_fwk",
  ]
}

group("unittest") {
  testonly = true
  deps = [
    ":libprivacy_mock_test",
    ":libprivacy_sdk_test",
  ]
}
