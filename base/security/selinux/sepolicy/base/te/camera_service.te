# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

allow camera_service accesstoken_service:binder { call };
allow camera_service bootevent_param:file { map open read };
allow camera_service bootevent_samgr_param:file { map open read };
allow camera_service build_version_param:file { map open read };
allow camera_service camera_host:binder { call transfer };
allow camera_service const_allow_mock_param:file { map open read };
allow camera_service const_allow_param:file { map open read };
allow camera_service const_build_param:file { map open read };
allow camera_service const_display_brightness_param:file { map open read };
allow camera_service const_param:file { map open read };
allow camera_service const_postinstall_fstab_param:file { map open read };
allow camera_service const_postinstall_param:file { map open read };
allow camera_service const_product_param:file { map open read };
allow camera_service dcamera:binder { call };
allow camera_service dcamera_host:binder { call transfer };
allow camera_service debug_param:file { map open read };
allow camera_service default_param:file { map read open };
allow camera_service dev_unix_socket:dir { search };
allow camera_service dhardware:binder { call transfer };
allow camera_service distributedsche_param:file { map open read };
allow camera_service foundation:binder { call };
allow camera_service hdf_camera_service:hdf_devmgr_class { get };
allow camera_service hdf_devmgr:binder { call transfer };
allow camera_service hdf_distributed_camera_service:hdf_devmgr_class { get };
allow camera_service hilog_param:file { map read open };
allow camera_service hw_sc_build_os_param:file { map open read };
allow camera_service hw_sc_build_param:file { map open read };
allow camera_service hw_sc_param:file { map open read };
allow camera_service init_param:file { map open read };
allow camera_service init_svc_param:file { map open read };
allow camera_service input_pointer_device_param:file { map open read };
allow camera_service media_service:binder { call };
allow camera_service net_param:file { map open read };
allow camera_service net_tcp_param:file { map open read };
allow camera_service ohos_boot_param:file { map open read };
allow camera_service ohos_param:file { map open read };
allow camera_service param_watcher:binder { call transfer };
allow camera_service persist_param:file { map open read };
allow camera_service persist_sys_param:file { map open read };
allow camera_service render_service:binder { call };
allow camera_service sa_accesstoken_manager_service:samgr_class { get };
allow camera_service sa_camera_service:samgr_class { add };
allow camera_service sa_device_service_manager:samgr_class { get };
allow camera_service sa_foundation_dms:samgr_class { get };
allow camera_service sa_param_watcher:samgr_class { get };
allow camera_service security_param:file { map open read };
allow camera_service startup_param:file { map open read };
allow camera_service sys_param:file { map open read };
allow camera_service system_bin_file:dir { search };
allow camera_service system_core_hap:binder { call transfer };
allow camera_service sys_usb_param:file { map open read };
allow camera_service tracefs:dir { search };
allow camera_service tracefs_trace_marker_file:file { open write };
