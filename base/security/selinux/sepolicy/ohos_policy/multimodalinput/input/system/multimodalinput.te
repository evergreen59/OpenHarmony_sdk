# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

type multimodalinput, sadomain, domain;

allow multimodalinput bootanimation:fd { use };
allow multimodalinput data_file:dir { search };
allow multimodalinput data_init_agent:dir { search };
allow multimodalinput data_init_agent:file { open read append ioctl };
allow multimodalinput data_log:dir { search write add_name create };
allow multimodalinput data_log:file { create open read write ioctl };
allow multimodalinput data_service_file:dir { search };
allow multimodalinput data_service_el1_file:dir { search };
allow multimodalinput data_service_el1_file:file { open read };
allow multimodalinput dev_dri_file:dir { search };
allow multimodalinput dev_dri_file:chr_file { open read write getattr ioctl };
allow multimodalinput dev_kmsg_file:chr_file { open write };
allow multimodalinput dev_input_file:chr_file { ioctl };
allow multimodalinput dev_unix_socket:dir { search };
allow multimodalinput dev_unix_socket:sock_file { write };
allow multimodalinput disp_gralloc_host:binder { call };
allow multimodalinput disp_gralloc_host:fd { use };
allow multimodalinput hdf_hdi_display_gralloc_service:hdf_devmgr_class { get };
allow multimodalinput faultloggerd_socket:sock_file { write };
allow multimodalinput faultloggerd:unix_stream_socket { connectto };
allow multimodalinput foundation:binder { call transfer };
allow multimodalinput hdf_devmgr:binder { call };
allow multimodalinput input_pointer_device_param:parameter_service { set };
allow multimodalinput multimodalinput:netlink_kobject_uevent_socket { bind create getattr setopt read };
#allow multimodalinput multimodalinput:process { ptrace };
allow multimodalinput param_watcher:binder { call transfer };
allow multimodalinput render_service:binder { call transfer };
allow multimodalinput resource_schedule_service:binder { call };
allow multimodalinput rootfs:chr_file { write };
allow multimodalinput sa_device_service_manager:samgr_class { get };
allow multimodalinput sa_foundation_dms:samgr_class { get };
allow multimodalinput sa_foundation_wms:samgr_class { get };
allow multimodalinput sa_multimodalinput_service:samgr_class { get };
allow multimodalinput sa_render_service:samgr_class { get };
allow multimodalinput sh:binder { call };
allow multimodalinput sys_file:dir { open read };
allow multimodalinput sys_file:file { getattr open read };
allow multimodalinput system_bin_file:dir { search };
allow multimodalinput system_bin_file:file { execute execute_no_trans map read open };
allow multimodalinput tracefs:dir { search };
allow multimodalinput tracefs:file { open write };
allow multimodalinput tracefs_trace_marker_file:file { open write };
allow multimodalinput vendor_etc_file:dir { search };
allow multimodalinput vendor_etc_file:file { getattr open read };
allow normal_hap multimodalinput:unix_stream_socket { read write };
allow normal_hap sa_multimodalinput_service:samgr_class { get };
allow system_basic_hap multimodalinput:unix_stream_socket { read };
allow system_basic_hap multimodalinput:unix_stream_socket { read write };
allow system_core_hap multimodalinput:unix_stream_socket { read };
allowxperm multimodalinput data_log:file ioctl { 0x5413 };
allowxperm multimodalinput dev_dri_file:chr_file ioctl { 0x641f };
allowxperm multimodalinput dev_input_file:chr_file ioctl { 0x4503 0x4560 0x4542 0x4548 0x456f 0x450a 0x4559 0x4568 0x455a 0x455b };
