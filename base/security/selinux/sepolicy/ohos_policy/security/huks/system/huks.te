# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


type huks_service, sadomain, domain;
type huks_service_exec, exec_attr, file_attr, system_file_attr;

init_daemon_domain(huks_service);

binder_call(huks_service, samgr);
#allow huks_service default_service:samgr_class { get add };
allow huks_service data_file:dir { search };
allow huks_service data_service_file:dir { search };
allow huks_service data_service_el1_file:dir { search };
allow huks_service data_service_el1_public_huksService_file:dir { add_name create open read remove_name search write rmdir getattr setattr };
allow huks_service data_service_el1_public_huksService_file:file { create getattr ioctl open read setattr unlink write };
allow huks_service foundation:binder { call transfer };
allow huks_service vendor_lib_file:dir { search };
allow huks_service samain_exec:file { entrypoint execute map read };
allow huks_service samgr:binder { call };
allow huks_service system_profile_file:dir { search };
allow huks_service tmpfs:lnk_file { read };
allow huks_service accesstoken_service:binder { call };
allow huks_service data_log:file { read write };
allow huks_service faultloggerd:fd { use };
allow huks_service faultloggerd:unix_stream_socket { connectto };
allow huks_service hiview:binder { call };
allow huks_service system_bin_file:dir { search };
allow huks_service system_bin_file:file { execute execute_no_trans map read open};
allow huks_service dev_unix_socket:dir { search };
allow huks_service sa_huks_service:samgr_class { get add };
allow huks_service sa_foundation_cesfwk_service:samgr_class { get };
allow huks_service sa_useriam_useridm_service:samgr_class { get };

#avc:  denied  { transfer } for  pid=273 comm="huks_service" scontext=u:r:huks_service:s0 tcontext=u:r:useriam:s0 tclass=binder permissive=1
#avc:  denied  { call } for  pid=452 comm="useriam" scontext=u:r:useriam:s0 tcontext=u:r:huks_service:s0 tclass=binder permissive=1
allow huks_service useriam:binder { call transfer };

#avc:  denied  { getopt } for  pid=273 comm="huks_service" scontext=u:r:huks_service:s0 tcontext=u:r:huks_service:s0 tclass=unix_dgram_socket permissive=1
#avc:  denied  { setopt } for  pid=273 comm="huks_service" scontext=u:r:huks_service:s0 tcontext=u:r:huks_service:s0 tclass=unix_dgram_socket permissive=1
allow huks_service huks_service:unix_dgram_socket { getopt setopt };

allow huks_service devinfo_private_param:file { map open read };
