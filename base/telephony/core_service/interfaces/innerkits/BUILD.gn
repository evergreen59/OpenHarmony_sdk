# Copyright (C) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//base/telephony/core_service/telephony.gni")
import("//build/ohos.gni")

SUBSYSTEM_DIR = "//base/telephony"
TELEPHONY_CORE_SERVICE_ROOT = "$SUBSYSTEM_DIR/core_service"
TELEPHONY_INTERFACES_INNERKITS =
    "$TELEPHONY_CORE_SERVICE_ROOT/interfaces/innerkits"
TELEPHONY_FRAMEWORKS_NATIVE_ROOT =
    "$TELEPHONY_CORE_SERVICE_ROOT/frameworks/native/"
TELEPHONY_IMS_CORE_SERVICE_ROOT =
    "$TELEPHONY_CORE_SERVICE_ROOT/services/ims_service_interaction"

config("tel_core_service_api_config") {
  # header file path
  include_dirs = [
    "$TELEPHONY_INTERFACES_INNERKITS/include",
    "$TELEPHONY_INTERFACES_INNERKITS/ims/include",
  ]

  cflags = []
  if (is_double_framework) {
    cflags = [ "-DCONFIG_DUAL_FRAMEWORK" ]
  }
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  if (is_standard_system) {
    cflags += [ "-DCONFIG_STANDARD_SYSTEM" ]
  }
  if (defined(build_public_version) && build_public_version) {
    cflags += [ "-DBUILD_PUBLIC_VERSION" ]
  }
}

ohos_shared_library("tel_core_service_api") {
  sources = [
    "$TELEPHONY_FRAMEWORKS_NATIVE_ROOT/src/cell_information.cpp",
    "$TELEPHONY_FRAMEWORKS_NATIVE_ROOT/src/cell_location.cpp",
    "$TELEPHONY_FRAMEWORKS_NATIVE_ROOT/src/core_manager_inner.cpp",
    "$TELEPHONY_FRAMEWORKS_NATIVE_ROOT/src/core_service_client.cpp",
    "$TELEPHONY_FRAMEWORKS_NATIVE_ROOT/src/core_service_proxy.cpp",
    "$TELEPHONY_FRAMEWORKS_NATIVE_ROOT/src/i_network_search_callback_stub.cpp",
    "$TELEPHONY_FRAMEWORKS_NATIVE_ROOT/src/ims_reg_info_callback_stub.cpp",
    "$TELEPHONY_FRAMEWORKS_NATIVE_ROOT/src/network_information.cpp",
    "$TELEPHONY_FRAMEWORKS_NATIVE_ROOT/src/network_search_result.cpp",
    "$TELEPHONY_FRAMEWORKS_NATIVE_ROOT/src/network_state.cpp",
    "$TELEPHONY_FRAMEWORKS_NATIVE_ROOT/src/operator_config_types.cpp",
    "$TELEPHONY_FRAMEWORKS_NATIVE_ROOT/src/resource_utils.cpp",
    "$TELEPHONY_FRAMEWORKS_NATIVE_ROOT/src/signal_information.cpp",
    "$TELEPHONY_FRAMEWORKS_NATIVE_ROOT/src/telephony_state_registry_client.cpp",
    "$TELEPHONY_FRAMEWORKS_NATIVE_ROOT/src/telephony_state_registry_proxy.cpp",
    "$TELEPHONY_IMS_CORE_SERVICE_ROOT/src/ims_core_service_callback_proxy.cpp",
  ]

  defines += [
    "TELEPHONY_LOG_TAG = \"CoreServiceApi\"",
    "LOG_DOMAIN = 0xD001F04",
  ]

  configs = [ "$TELEPHONY_CORE_SERVICE_ROOT/utils:telephony_log_config" ]

  public_configs = [ ":tel_core_service_api_config" ]

  external_deps = [
    "ability_base:want",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "drivers_interface_ril:hril_innerkits",
    "eventhandler:libeventhandler",
    "init:libbegetutil",
    "ipc:ipc_core",
    "resource_management:global_resmgr",
    "samgr:samgr_proxy",
  ]

  if (is_standard_system) {
    external_deps += [ "hiviewdfx_hilog_native:libhilog" ]
  } else {
    external_deps += [ "hilog:libhilog" ]
  }
  part_name = "core_service"
  subsystem_name = "telephony"
}
