# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//foundation/ability/ability_runtime/ability_runtime.gni")

abilityms_files = [
  "src/ability_connect_manager.cpp",
  "src/ability_connect_callback_stub.cpp",
  "src/ability_event_handler.cpp",
  "src/ability_interceptor.cpp",
  "src/ability_interceptor_executer.cpp",
  "src/ability_manager_service.cpp",
  "src/ability_manager_stub.cpp",
  "src/ability_manager_proxy.cpp",
  "src/container_manager_proxy.cpp",
  "src/container_manager_client.cpp",
  "src/ability_record.cpp",
  "src/ability_scheduler_stub.cpp",
  "src/ability_scheduler_proxy.cpp",
  "src/ability_token_stub.cpp",
  "src/app_scheduler.cpp",
  "src/connection_record.cpp",
  "src/data_ability_caller_recipient.cpp",
  "src/data_ability_manager.cpp",
  "src/data_ability_record.cpp",
  "src/launch_param.cpp",
  "src/lifecycle_deal.cpp",
  "src/lifecycle_state_info.cpp",
  "src/ability_running_info.cpp",
  "src/extension_running_info.cpp",
  "src/caller_info.cpp",
  "src/sender_info.cpp",
  "src/wants_info.cpp",
  "src/want_sender_info.cpp",
  "src/pending_want_record.cpp",
  "src/want_receiver_proxy.cpp",
  "src/want_receiver_stub.cpp",
  "src/want_sender_proxy.cpp",
  "src/want_sender_stub.cpp",
  "src/pending_want_key.cpp",
  "src/pending_want_manager.cpp",
  "src/pending_want_common_event.cpp",
  "src/ability_start_setting.cpp",
  "src/ams_configuration_parameter.cpp",
  "src/image_info.cpp",
  "src/mission_snapshot.cpp",

  # new ability manager service here
  "src/task_data_persistence_mgr.cpp",
  "src/start_options.cpp",
  "src/stop_user_callback_proxy.cpp",
  "src/stop_user_callback_stub.cpp",
  "src/call_container.cpp",
  "src/call_record.cpp",
  "src/inner_mission_info.cpp",
  "src/mission.cpp",
  "src/mission_data_storage.cpp",
  "src/mission_info.cpp",
  "src/mission_info_mgr.cpp",
  "src/mission_listener_controller.cpp",
  "src/mission_listener_proxy.cpp",
  "src/mission_listener_stub.cpp",
  "src/remote_mission_listener_proxy.cpp",
  "src/remote_mission_listener_stub.cpp",
  "src/mission_list_manager.cpp",
  "src/mission_list.cpp",

  #connection observer
  "src/connection_observer_controller.cpp",
  "src/connection_state_item.cpp",
  "src/connection_state_manager.cpp",
  "src/dlp_state_item.cpp",

  #multi user
  "src/user_controller.cpp",
  "src/user_event_handler.cpp",

  #free_install
  "src/atomic_service_status_callback_proxy.cpp",
  "src/atomic_service_status_callback_stub.cpp",
  "src/atomic_service_status_callback.cpp",
  "src/free_install_manager.cpp",

  "src/background_task_observer.cpp",
  "src/resident_process_manager.cpp",

  "src/ability_bundle_event_callback.cpp",
  "src/ability_event_util.cpp",
]

if (ability_runtime_graphics) {
  abilityms_files += [
    "src/application_anr_listener.cpp",
    "src/implicit_start_processor.cpp",
    "src/system_dialog_scheduler.cpp",
  ]
}
