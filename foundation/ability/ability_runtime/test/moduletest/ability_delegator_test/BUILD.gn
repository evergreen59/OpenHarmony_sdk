# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")
module_output_path = "ability_delegator/"

ability_delegator_mock_sources = [
  "${ability_runtime_path}/tools/aa/src/shell_command_executor.cpp",
  "${ability_runtime_path}/tools/aa/src/test_observer.cpp",
  "${ability_runtime_path}/tools/aa/src/test_observer_stub.cpp",
  "${ability_runtime_test_path}/mock/frameworks_kits_appkit_native_test/ability_delegator/mock_ability_delegator_stub.cpp",
  "${ability_runtime_test_path}/mock/frameworks_kits_appkit_native_test/ability_delegator/mock_iability_monitor.cpp",
  "${ability_runtime_test_path}/mock/frameworks_kits_appkit_native_test/ability_delegator/mock_test_observer_stub.cpp",
]

###############################################################################
config("moduletest_include_dir") {
  visibility = [ ":*" ]
  include_dirs = [
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_delegator/",
    "${ability_runtime_path}/tools/aa/include",
    "${ability_runtime_test_path}/mock/frameworks_kits_appkit_native_test/ability_delegator",
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_delegator/runner_runtime/",
    "${ability_runtime_innerkits_path}/ability_manager/include",
    "//third_party/googletest/googlemock/include",
    "${ability_runtime_services_path}/abilitymgr/include",
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_runtime/context/",
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_runtime/app/",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  defines = [
    "APP_LOG_TAG = \"ApplicationUnitTest\"",
    "LOG_DOMAIN = 0xD001151",
  ]
}

ohos_moduletest("shell_cmd_result_moduletest") {
  module_out_path = module_output_path
  sources = [ "shell_cmd_result_module_test.cpp" ]

  configs = [ ":moduletest_include_dir" ]
  configs += [ "${ability_runtime_services_path}/common:common_config" ]

  deps = [
    "${ability_runtime_native_path}/appkit:appkit_delegator",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "hiviewdfx_hilog_native:libhilog",
  ]
}

ohos_moduletest("ability_delegator_args_moduletest") {
  module_out_path = module_output_path
  sources = [ "ability_delegator_args_module_test.cpp" ]

  configs = [ ":moduletest_include_dir" ]
  configs += [ "${ability_runtime_services_path}/common:common_config" ]

  deps = [
    "${ability_runtime_native_path}/appkit:appkit_delegator",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "hiviewdfx_hilog_native:libhilog",
  ]
}

ohos_moduletest("delegator_thread_moduletest") {
  module_out_path = module_output_path

  sources = [ "delegator_thread_module_test.cpp" ]

  configs = [ ":moduletest_include_dir" ]
  configs += [ "${ability_runtime_services_path}/common:common_config" ]

  deps = [
    "${ability_runtime_native_path}/appkit:appkit_delegator",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_moduletest("ability_delegator_registry_moduletest") {
  module_out_path = module_output_path

  sources = [ "ability_delegator_registry_module_test.cpp" ]
  sources += ability_delegator_mock_sources

  configs = [ ":moduletest_include_dir" ]
  configs += [ "${ability_runtime_services_path}/common:common_config" ]

  deps = [
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_native_path}/appkit:app_context",
    "${ability_runtime_native_path}/appkit:appkit_delegator",
    "${ability_runtime_native_path}/appkit:appkit_native",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "ability_runtime:runtime",
    "c_utils:utils",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_moduletest("iability_monitor_moduletest") {
  module_out_path = module_output_path

  sources = [ "iability_monitor_module_test.cpp" ]
  sources += ability_delegator_mock_sources

  configs = [ ":moduletest_include_dir" ]
  configs += [ "${ability_runtime_services_path}/common:common_config" ]

  deps = [
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_native_path}/appkit:appkit_delegator",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "c_utils:utils",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_moduletest("ability_delegator_moduletest") {
  module_out_path = module_output_path

  sources = [ "ability_delegator_module_test.cpp" ]
  sources += ability_delegator_mock_sources

  configs = [ ":moduletest_include_dir" ]
  configs += [ "${ability_runtime_services_path}/common:common_config" ]

  deps = [
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_native_path}/appkit:app_context",
    "${ability_runtime_native_path}/appkit:appkit_delegator",
    "${ability_runtime_native_path}/appkit:appkit_native",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_moduletest("js_test_runner_moduletest") {
  module_out_path = module_output_path

  sources = [ "js_test_runner_module_test.cpp" ]
  sources += ability_delegator_mock_sources

  configs = [ ":moduletest_include_dir" ]
  configs += [
    "${ability_runtime_services_path}/common:common_config",
    "//arkcompiler/ets_runtime:ark_jsruntime_public_config",
  ]

  deps = [
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_native_path}/appkit:app_context",
    "${ability_runtime_native_path}/appkit:appkit_delegator",
    "${ability_runtime_native_path}/appkit:appkit_native",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "//arkcompiler/ets_runtime:libark_jsruntime",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_runtime:ability_manager",
    "ability_runtime:runtime",
    "bundle_framework:appexecfwk_base",
    "c_utils:utils",
    "hiviewdfx_hilog_native:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
  ]
}

###############################################################################

group("moduletest") {
  testonly = true
  deps = []

  deps += [
    ":ability_delegator_args_moduletest",
    ":ability_delegator_moduletest",
    ":ability_delegator_registry_moduletest",
    ":delegator_thread_moduletest",
    ":iability_monitor_moduletest",
    ":js_test_runner_moduletest",
    ":shell_cmd_result_moduletest",
  ]
}
###############################################################################
