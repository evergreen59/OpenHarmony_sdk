# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/ability_call_test"

ohos_moduletest("call_ability_service_module_test") {
  module_out_path = module_output_path

  include_dirs = [
    "${ability_runtime_test_path}/moduletest/mock/include",
    "${distributedschedule_path}/samgr/interfaces/innerkits/samgr_proxy/include",
    "${distributedschedule_path}/samgr/adapter/interfaces/innerkits/include/",
    "${ability_runtime_innerkits_path}/app_manager/include/appmgr",
    "${ability_runtime_test_path}/mock/frameworks_kits_ability_native_test/include",
  ]

  sources = [
    # add mock file
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core/src/appmgr/mock_app_scheduler.cpp",
    "call_ability_service_module_test.cpp",
  ]

  configs = [ "${ability_runtime_services_path}/abilitymgr:abilityms_config" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${ability_runtime_innerkits_path}/app_manager:app_manager",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_services_path}/abilitymgr:abilityms",
    "${ability_runtime_services_path}/common:perm_verification",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/aakit:aakit_mock",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core:appexecfwk_appmgr_mock",
    "${ability_runtime_test_path}/mock/services_abilitymgr_test/libs/appexecfwk_core:appexecfwk_bundlemgr_mock",
    "${ability_runtime_test_path}/unittest:abilityms_test_source",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "dsoftbus:softbus_client",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "init:libbeget_proxy",
    "ipc:ipc_core",
  ]

  if (background_task_mgr_continuous_task_enable) {
    external_deps += [ "background_task_mgr:bgtaskmgr_innerkits" ]
  }
}

group("moduletest") {
  testonly = true
  deps = [ ":call_ability_service_module_test" ]
}
