# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/ability/ability_runtime/ability_runtime.gni")

module_output_path = "ability_runtime/app"

ohos_unittest("AppRecoveryUnitTest") {
  module_out_path = module_output_path
  cflags_cc = [ "-DUNITTEST" ]
  cflags = [ "-DUNITTEST" ]
  include_dirs = [
    "./",
    "${ability_runtime_test_path}/mock/services_appmgr_test/include",
  ]

  # push recovery source file here
  sources = [ "app_recovery_test.cpp" ]

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_innerkits_path}/dataobs_manager:dataobs_manager",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_native_path}/appkit:app_context",
    "${ability_runtime_native_path}/appkit:app_context_utils",
    "${ability_runtime_native_path}/appkit:appkit_delegator",
    "${ability_runtime_services_path}/common:event_report",
    "${multimedia_path}/interfaces/innerkits:image_native",
    "${windowmanager_path}/dm:libdm",
    "${windowmanager_path}/interfaces/kits/napi/window_runtime:windowstage_kit",
    "${windowmanager_path}/wm:libwm",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:configuration",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:napi_base_context",
    "ability_runtime:runtime",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libtoken_callback_sdk",
    "bundle_framework:appexecfwk_base",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "faultloggerd:lib_dfx_dump_catcher",
    "form_fwk:fmskit_native",
    "form_fwk:form_manager",
    "hichecker_native:libhichecker",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "napi:ace_napi",
  ]
}

ohos_unittest("AbilityRecoveryUnitTest") {
  module_out_path = module_output_path
  cflags_cc = [ "-DUNITTEST" ]
  cflags = [ "-DUNITTEST" ]
  include_dirs = [
    "./",
    "./mock",
    "${ability_runtime_test_path}/mock/services_appmgr_test/include",
  ]

  # push recovery source file here
  sources = [ "ability_recovery_test.cpp" ]

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${ability_runtime_innerkits_path}/dataobs_manager:dataobs_manager",
    "${ability_runtime_native_path}/ability/native:abilitykit_native",
    "${ability_runtime_native_path}/appkit:app_context",
    "${ability_runtime_native_path}/appkit:app_context_utils",
    "${ability_runtime_native_path}/appkit:appkit_delegator",
    "${ability_runtime_services_path}/common:event_report",
    "${multimedia_path}/interfaces/innerkits:image_native",
    "${windowmanager_path}/dm:libdm",
    "${windowmanager_path}/interfaces/kits/napi/window_runtime:windowstage_kit",
    "${windowmanager_path}/wm:libwm",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:configuration",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:napi_base_context",
    "ability_runtime:runtime",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libtoken_callback_sdk",
    "bundle_framework:appexecfwk_base",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "faultloggerd:lib_dfx_dump_catcher",
    "form_fwk:fmskit_native",
    "form_fwk:form_manager",
    "hichecker_native:libhichecker",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "napi:ace_napi",
  ]
}

group("unittest") {
  testonly = true

  deps = [
    ":AbilityRecoveryUnitTest",
    ":AppRecoveryUnitTest",
  ]
}
