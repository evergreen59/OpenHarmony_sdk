# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../../appexecfwk.gni")
import("../../../../../services/bundlemgr/appexecfwk_bundlemgr.gni")

module_output_path = "bundle_framework/bundlemgrservice"

ohos_unittest("BmsBundleInstallerTest") {
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [ "//third_party/jsoncpp/include" ]
  sources = [
    "${services_path}/bundlemgr/src/account_helper.cpp",
    "${services_path}/bundlemgr/src/bms_param.cpp",
    "${services_path}/bundlemgr/src/bundle_common_event_mgr.cpp",
    "${services_path}/bundlemgr/src/bundle_data_mgr.cpp",
    "${services_path}/bundlemgr/src/bundle_event_callback_death_recipient.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_host_impl.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_service.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/src/bundle_scanner.cpp",
    "${services_path}/bundlemgr/src/bundle_state_storage.cpp",
    "${services_path}/bundlemgr/src/bundle_status_callback_death_recipient.cpp",
    "${services_path}/bundlemgr/src/bundle_user_mgr_host_impl.cpp",
    "${services_path}/bundlemgr/src/hidump_helper.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/src/installd/installd_service.cpp",
  ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources

  sources += [ "bms_bundle_installer_test.cpp" ]

  configs = [
    "${services_path}/bundlemgr/test:bundlemgr_test_config",
    "//base/notification/eventhandler/frameworks/eventhandler:libeventhandler_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${appexecfwk_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/backupTest:backupTest",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/devicetype_error:devicetype_error",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/fifth_right:fifth_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/first_right:first_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/fourth_right:fourth_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/previewTest:previewTest",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/rightTest:rightTest",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/rightTest1:rightTest1",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/second_right:second_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/seventh_right:seventh_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/system_module:system_module",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/third_right:third_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/thumbnailTest:thumbnailTest",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/versionTest1:versionTest1",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/versionTest2:versionTest2",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/versionTest3:versionTest3",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/wrong_bundle_name:wrong_bundle_name",
  ]

  if (bundle_framework_graphics) {
    include_dirs += [
      "//foundation/multimedia/image_framework/interfaces/innerkits/include",
    ]
    deps += [ "//foundation/multimedia/image_framework/interfaces/innerkits:image_native" ]
  }

  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "appverify:libhapverify",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hitrace_native:hitrace_meter",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  defines = []
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }
  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }
  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:ability_manager",
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_info_manager:distributed_device_profile_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }
  if (device_manager_enable) {
    sources += [ "${services_path}/bundlemgr/src/bms_device_manager.cpp" ]
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "DEVICE_MANAGER_ENABLE" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (hicollie_enable) {
    external_deps += [ "hicollie_native:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent_native:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (bundle_framework_quick_fix) {
    include_dirs += [ "${services_path}/bundlemgr/src/include/quick_fix" ]
    sources += quick_fix
    defines += [ "BUNDLE_FRAMEWORK_QUICK_FIX" ]
  }

  if (bms_rdb_enable) {
    configs += [ "../../../../../services/bundlemgr:rdb_config" ]
    defines += [ "BMS_RDB_ENABLE" ]
    external_deps += [ "relational_store:native_rdb" ]
    sources += [
      "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
      "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
      "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
      "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
    ]
  } else {
    external_deps += [ "kv_store:distributeddata_inner" ]
    sources += [
      "${services_path}/bundlemgr/src/bundle_data_storage_database.cpp",
      "${services_path}/bundlemgr/src/kvstore_death_recipient_callback.cpp",
      "${services_path}/bundlemgr/src/preinstall_data_storage.cpp",
    ]
  }
}

ohos_unittest("BmsMultipleBundleInstallerTest") {
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [ "//third_party/jsoncpp/include" ]
  sources = [
    "${services_path}/bundlemgr/src/account_helper.cpp",
    "${services_path}/bundlemgr/src/bms_param.cpp",
    "${services_path}/bundlemgr/src/bundle_common_event_mgr.cpp",
    "${services_path}/bundlemgr/src/bundle_data_mgr.cpp",
    "${services_path}/bundlemgr/src/bundle_event_callback_death_recipient.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_host_impl.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_service.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/src/bundle_scanner.cpp",
    "${services_path}/bundlemgr/src/bundle_state_storage.cpp",
    "${services_path}/bundlemgr/src/bundle_status_callback_death_recipient.cpp",
    "${services_path}/bundlemgr/src/bundle_user_mgr_host_impl.cpp",
    "${services_path}/bundlemgr/src/hidump_helper.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/src/installd/installd_service.cpp",
  ]

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += bundle_install_sources

  sources += [ "bms_multiple_installer_test.cpp" ]

  configs = [
    "${services_path}/bundlemgr/test:bundlemgr_test_config",
    "//base/notification/eventhandler/frameworks/eventhandler:libeventhandler_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${appexecfwk_path}/test/sceneProject/unittest/ohos_test:copy_ohos_test",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/eighth_right:eighth_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/eleventh_right:eleventh_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/fifteenth_right:fifteenth_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/first_diff_minCompCode:first_diff_minCompCode",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/first_diff_release_type:first_diff_release_type",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/first_right:first_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/first_right_compCode:first_right_compCode",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/first_right_with_diff_moduleName:first_right_with_diff_moduleName",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/first_right_with_diff_moduleType:first_right_with_diff_moduleType",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/fourteenth_right:fourteenth_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/fourth_right:fourth_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/ninth_right:ninth_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/rightTest:rightTest",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/rightTest1:rightTest1",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/second_backup_right:second_backup_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/second_right:second_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/second_right_with_same_moduleName:second_right_with_same_moduleName",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/seventh_right:seventh_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/sixteenth_right:sixteenth_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/sixth_right:sixth_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/tenth_right:tenth_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/third_right:third_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/thirteenth_right:thirteenth_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/twelfth_right:twelfth_right",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/versionTest1:versionTest1",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/versionTest2:versionTest2",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/versionTest3:versionTest3",
    "${appexecfwk_path}/test/sceneProject/unittest/test_bundle/wrong_bundle_name:wrong_bundle_name",
  ]

  if (bundle_framework_graphics) {
    include_dirs += [
      "//foundation/multimedia/image_framework/interfaces/innerkits/include",
    ]
    deps += [ "//foundation/multimedia/image_framework/interfaces/innerkits:image_native" ]
  }

  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "appverify:libhapverify",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hitrace_native:hitrace_meter",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  defines = []
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }

  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }

  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:ability_manager",
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_info_manager:distributed_device_profile_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }

  if (hicollie_enable) {
    external_deps += [ "hicollie_native:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (device_manager_enable) {
    sources += [ "${services_path}/bundlemgr/src/bms_device_manager.cpp" ]
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "DEVICE_MANAGER_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent_native:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (bms_rdb_enable) {
    configs += [ "../../../../../services/bundlemgr:rdb_config" ]
    defines += [ "BMS_RDB_ENABLE" ]
    external_deps += [ "relational_store:native_rdb" ]
    sources += [
      "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
      "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
      "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
      "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
    ]
  } else {
    external_deps += [ "kv_store:distributeddata_inner" ]
    sources += [
      "${services_path}/bundlemgr/src/bundle_data_storage_database.cpp",
      "${services_path}/bundlemgr/src/kvstore_death_recipient_callback.cpp",
      "${services_path}/bundlemgr/src/preinstall_data_storage.cpp",
    ]
  }
}

ohos_unittest("BmsBundleInstallIpcTest") {
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [ "//third_party/jsoncpp/include" ]
  sources = [
    "${services_path}/bundlemgr/src/account_helper.cpp",
    "${services_path}/bundlemgr/src/bms_param.cpp",
    "${services_path}/bundlemgr/src/bundle_common_event_mgr.cpp",
    "${services_path}/bundlemgr/src/bundle_data_mgr.cpp",
    "${services_path}/bundlemgr/src/bundle_event_callback_death_recipient.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_host_impl.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_service.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/src/bundle_scanner.cpp",
    "${services_path}/bundlemgr/src/bundle_state_storage.cpp",
    "${services_path}/bundlemgr/src/bundle_status_callback_death_recipient.cpp",
    "${services_path}/bundlemgr/src/bundle_user_mgr_host_impl.cpp",
    "${services_path}/bundlemgr/src/hidump_helper.cpp",
    "${services_path}/bundlemgr/src/installd/installd_host_impl.cpp",
    "${services_path}/bundlemgr/src/installd/installd_operator.cpp",
    "${services_path}/bundlemgr/src/installd/installd_service.cpp",
  ]

  sources += bundle_install_sources

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_bundle_stream_installer_host_impl.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources -=
      [ "${services_path}/bundlemgr/src/bundle_stream_installer_host_impl.cpp" ]

  sources += [ "bms_bundle_installer_ipc_test.cpp" ]

  configs = [
    "${services_path}/bundlemgr/test:bundlemgr_test_config",
    "//base/notification/eventhandler/frameworks/eventhandler:libeventhandler_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = []
  if (bundle_framework_graphics) {
    include_dirs += [
      "//foundation/multimedia/image_framework/interfaces/innerkits/include",
    ]
    deps += [ "//foundation/multimedia/image_framework/interfaces/innerkits:image_native" ]
  }

  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "appverify:libhapverify",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hitrace_native:hitrace_meter",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  defines = []
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }

  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }

  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:ability_manager",
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_info_manager:distributed_device_profile_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }

  if (hicollie_enable) {
    external_deps += [ "hicollie_native:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (device_manager_enable) {
    sources += [ "${services_path}/bundlemgr/src/bms_device_manager.cpp" ]
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "DEVICE_MANAGER_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent_native:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (bms_rdb_enable) {
    configs += [ "../../../../../services/bundlemgr:rdb_config" ]
    defines += [ "BMS_RDB_ENABLE" ]
    external_deps += [ "relational_store:native_rdb" ]
    sources += [
      "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
      "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
      "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
      "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
    ]
  } else {
    external_deps += [ "kv_store:distributeddata_inner" ]
    sources += [
      "${services_path}/bundlemgr/src/bundle_data_storage_database.cpp",
      "${services_path}/bundlemgr/src/kvstore_death_recipient_callback.cpp",
      "${services_path}/bundlemgr/src/preinstall_data_storage.cpp",
    ]
  }
}

ohos_unittest("BmsBundleInstallCheckerTest") {
  use_exceptions = true
  module_out_path = module_output_path
  include_dirs = [ "//third_party/jsoncpp/include" ]
  sources = [
    "${services_path}/bundlemgr/src/account_helper.cpp",
    "${services_path}/bundlemgr/src/bms_param.cpp",
    "${services_path}/bundlemgr/src/bundle_common_event_mgr.cpp",
    "${services_path}/bundlemgr/src/bundle_data_mgr.cpp",
    "${services_path}/bundlemgr/src/bundle_event_callback_death_recipient.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_host_impl.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_service.cpp",
    "${services_path}/bundlemgr/src/bundle_mgr_service_event_handler.cpp",
    "${services_path}/bundlemgr/src/bundle_scanner.cpp",
    "${services_path}/bundlemgr/src/bundle_state_storage.cpp",
    "${services_path}/bundlemgr/src/bundle_status_callback_death_recipient.cpp",
    "${services_path}/bundlemgr/src/bundle_user_mgr_host_impl.cpp",
    "${services_path}/bundlemgr/src/hidump_helper.cpp",
  ]

  sources += bundle_install_sources

  sources += [
    "${services_path}/bundlemgr/test/mock/src/accesstoken_kit.cpp",
    "${services_path}/bundlemgr/test/mock/src/installd_permission_mgr.cpp",
    "${services_path}/bundlemgr/test/mock/src/mock_status_receiver.cpp",
    "${services_path}/bundlemgr/test/mock/src/system_ability_helper.cpp",
  ]

  sources += [ "bms_bundle_install_checker_test.cpp" ]

  configs = [
    "${services_path}/bundlemgr/test:bundlemgr_test_config",
    "//base/notification/eventhandler/frameworks/eventhandler:libeventhandler_config",
  ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = []
  if (bundle_framework_graphics) {
    include_dirs += [
      "//foundation/multimedia/image_framework/interfaces/innerkits/include",
    ]
    deps += [ "//foundation/multimedia/image_framework/interfaces/innerkits:image_native" ]
  }

  deps += bundle_install_deps

  external_deps = [
    "ability_base:want",
    "appverify:libhapverify",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hitrace_native:hitrace_meter",
    "init:libbegetutil",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  defines = []
  if (configpolicy_enable) {
    external_deps += [ "config_policy:configpolicy_util" ]
    defines += [ "CONFIG_POLOCY_ENABLE" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux:libhap_restorecon" ]
    cflags += [ "-DWITH_SELINUX" ]
  }

  if (account_enable) {
    external_deps += [ "os_account:os_account_innerkits" ]
    defines += [ "ACCOUNT_ENABLE" ]
  }

  if (bundle_framework_free_install) {
    sources += aging
    sources += free_install
    sources += distributed_manager
    external_deps += [
      "ability_runtime:ability_manager",
      "ability_runtime:app_manager",
      "battery_manager:batterysrv_client",
      "device_info_manager:distributed_device_profile_client",
      "device_usage_statistics:usagestatsinner",
      "display_manager:displaymgr",
      "power_manager:powermgr_client",
      "syscap_codec:syscap_interface_shared",
    ]
    defines += [ "BUNDLE_FRAMEWORK_FREE_INSTALL" ]
  }

  if (hicollie_enable) {
    external_deps += [ "hicollie_native:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resource_management:global_resmgr" ]
  }
  if (device_manager_enable) {
    sources += [ "${services_path}/bundlemgr/src/bms_device_manager.cpp" ]
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "DEVICE_MANAGER_ENABLE" ]
  }

  if (hisysevent_enable) {
    sources += [ "${services_path}/bundlemgr/src/inner_event_report.cpp" ]
    external_deps += [ "hisysevent_native:libhisysevent" ]
    defines += [ "HISYSEVENT_ENABLE" ]
  }

  if (bms_rdb_enable) {
    configs += [ "../../../../../services/bundlemgr:rdb_config" ]
    defines += [ "BMS_RDB_ENABLE" ]
    external_deps += [ "relational_store:native_rdb" ]
    sources += [
      "${services_path}/bundlemgr/src/bundle_data_storage_rdb.cpp",
      "${services_path}/bundlemgr/src/preinstall_data_storage_rdb.cpp",
      "${services_path}/bundlemgr/src/rdb/bms_rdb_open_callback.cpp",
      "${services_path}/bundlemgr/src/rdb/rdb_data_manager.cpp",
    ]
  } else {
    external_deps += [ "kv_store:distributeddata_inner" ]
    sources += [
      "${services_path}/bundlemgr/src/bundle_data_storage_database.cpp",
      "${services_path}/bundlemgr/src/kvstore_death_recipient_callback.cpp",
      "${services_path}/bundlemgr/src/preinstall_data_storage.cpp",
    ]
  }
}

group("unittest") {
  testonly = true

  if (ability_runtime_enable) {
    deps = [
      ":BmsBundleInstallCheckerTest",
      ":BmsBundleInstallIpcTest",
      ":BmsBundleInstallerTest",
      ":BmsMultipleBundleInstallerTest",
    ]
  }
}
