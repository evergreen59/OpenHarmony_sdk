# Copyright (c) 2020 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/lite/config/component/lite_component.gni")

config("bundle_config") {
  defines = [ "OHOS_APPEXECFWK_BMS_BUNDLEMANAGER" ]
  cflags_cc = [ "-std=c++14" ]
}

declare_args() {
  enable_ohos_bundle_manager_service = false
  enable_ohos_bundle_manager_service_permission = false
}

if (ohos_kernel_type == "liteos_m") {
  static_library("bundlems") {
    sources = [
      "src/bundle_map.cpp",
      "src/bundle_mgr_service.cpp",
      "src/bundle_mgr_slite_feature.cpp",
      "src/bundle_util.cpp",
      "src/gt_bundle_extractor.cpp",
      "src/gt_bundle_installer.cpp",
      "src/gt_bundle_manager_service.cpp",
      "src/gt_bundle_parser.cpp",
      "src/gt_extractor_util.cpp",
    ]

    defines = ["JERRY_FOR_IAR_CONFIG"]
    if (enable_ohos_bundle_manager_service == true) {
      defines += [ "_MINI_BMS_" ]
    }

    if (enable_ohos_bundle_manager_service_permission == true) {
      defines += [
        "_MINI_BMS_PERMISSION_",
        "BC_TRANS_ENABLE",
      ]
    }

    deps = [
      "${appexecfwk_lite_path}/frameworks/bundle_lite:bundle",
      "//base/global/resource_management_lite/frameworks/resmgr_lite:global_resmgr",
      "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_static",
      "//build/lite/config/component/cJSON:cjson_static",
      "//foundation/arkui/ace_engine_lite/frameworks:ace_lite",
      "//foundation/systemabilitymgr/samgr_lite/samgr:samgr",
      "//third_party/jerryscript/jerry-core:jerry-core_static"
    ]

    include_dirs = [
      "${appexecfwk_lite_path}/services/bundlemgr_lite/include",
      "${appexecfwk_lite_path}/interfaces/inner_api/bundlemgr_lite/slite",
      "${appexecfwk_lite_path}/interfaces/inner_api/bundlemgr_lite",
      "${appexecfwk_lite_path}/interfaces/kits/bundle_lite/slite",
      "${appexecfwk_lite_path}/interfaces/kits/bundle_lite",
      "${appexecfwk_lite_path}/utils/bundle_lite",
      "${appexecfwk_lite_path}/frameworks/bundle_lite/include",
      "//base/hiviewdfx/hilog_lite/interfaces/native/kits/hilog_lite",
      "//base/startup/init/interfaces/innerkits/include/syspara",
      "${aafwk_lite_path}/interfaces/kits/ability_lite/slite",
      "${aafwk_lite_path}/services/abilitymgr_lite/include",
      "${aafwk_lite_path}/interfaces/inner_api/abilitymgr_lite",
      "${aafwk_lite_path}/interfaces/kits/ability_lite",
      "${aafwk_lite_path}/interfaces/kits/want_lite",
      "${aafwk_lite_path}/frameworks/want_lite/include",
      "//base/global/resource_management_lite/interfaces/inner_api/include",
      "//foundation/systemabilitymgr/samgr_lite/interfaces/kits/registry",
      "//foundation/systemabilitymgr/samgr_lite/interfaces/kits/samgr",
      "//third_party/jerryscript/jerry-core",
      "//third_party/jerryscript/jerry-core/api",
      "//third_party/jerryscript/jerry-core/ecma/base",
      "//third_party/jerryscript/jerry-core/include",
      "//third_party/jerryscript/jerry-core/jrt",
      "//third_party/jerryscript/jerry-core/jmem",
      "//third_party/jerryscript/jerry-core/lit",
      "//third_party/cJSON",
      "//third_party/zlib",
      "//third_party/zlib/contrib/minizip",
      "//base/security/permission_lite/interfaces/kits",
      "//base/security/permission_lite/services/pms/include",
      "//base/security/appverify/interfaces/innerkits/appverify_lite/include",
      "//third_party/bounds_checking_function/include",
      "//commonlibrary/utils_lite/include",
      "//commonlibrary/utils_lite/memory/include",
      "include",
    ]
  }
  lite_component("appexecfwk_services_lite") {
    features = [ ":bundlems" ]
  }
} else {
  shared_library("bundlems") {
    configs -= [ "//build/lite/config:language_cpp" ]
    configs += [ ":bundle_config" ]

    cflags = [
      "-Wall",
      "-Wno-format",
      "-Wno-format-extra-args",
    ]
    cflags_cc = cflags

    sources = [
      "src/bundle_daemon_client.cpp",
      "src/bundle_extractor.cpp",
      "src/bundle_info_creator.cpp",
      "src/bundle_inner_feature.cpp",
      "src/bundle_installer.cpp",
      "src/bundle_manager_service.cpp",
      "src/bundle_map.cpp",
      "src/bundle_ms_feature.cpp",
      "src/bundle_ms_host.cpp",
      "src/bundle_parser.cpp",
      "src/bundle_res_transform.cpp",
      "src/bundle_util.cpp",
      "src/extractor_util.cpp",
      "src/hap_sign_verify.cpp",
      "src/zip_file.cpp",
    ]
    include_dirs = [
      "//base/global/resource_management_lite/interfaces/inner_api/include",
      "${aafwk_lite_path}/services/abilitymgr_lite/include",
      "${aafwk_lite_path}/interfaces/inner_api/abilitymgr_lite",
      "${aafwk_lite_path}/interfaces/kits/ability_lite",
      "${aafwk_lite_path}/interfaces/kits/want_lite",
      "${aafwk_lite_path}/frameworks/want_lite/include",
      "${appexecfwk_lite_path}/interfaces/inner_api/bundlemgr_lite",
      "${appexecfwk_lite_path}/frameworks/bundle_lite/include",
      "${appexecfwk_lite_path}/interfaces/kits/bundle_lite",
      "${appexecfwk_lite_path}/utils/bundle_lite",
      "//foundation/systemabilitymgr/samgr_lite/interfaces/kits/registry",
      "//foundation/systemabilitymgr/samgr_lite/interfaces/kits/samgr",
      "//third_party/cJSON",
      "//third_party/zlib",
      "//third_party/zlib/contrib/minizip",
      "//base/security/permission_lite/interfaces/kits",
      "//base/security/permission_lite/services/pms/include",
      "//base/security/appverify/interfaces/innerkits/appverify_lite/include",
      "//third_party/bounds_checking_function/include",
      "//commonlibrary/utils_lite/include",
      "//commonlibrary/utils_lite/memory",
      "include",
    ]

    public_deps = [
      "${appexecfwk_lite_path}/frameworks/bundle_lite:bundle",
      "//base/global/resource_management_lite/frameworks/resmgr_lite:global_resmgr",
      "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
      "//base/security/appverify/interfaces/innerkits/appverify_lite:verify",
      "//build/lite/config/component/cJSON:cjson_shared",
      "//build/lite/config/component/zlib:zlib_shared",
      "//foundation/systemabilitymgr/samgr_lite/samgr:samgr",
    ]
  }
  lite_component("appexecfwk_services_lite") {
    features = [
      ":bundlems",
      "tools:bm",
      "bundle_daemon:bundle_daemon",
    ]
  }
}

generate_notice_file("appexecfwk_services_lite_notice_file") {
  module_name = "appexecfwk_services_lite"
  module_source_dir_list = [
    "//third_party/cJSON",
    "//third_party/zlib",
    "//third_party/bounds_checking_function",
  ]
}
