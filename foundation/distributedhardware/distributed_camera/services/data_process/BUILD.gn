# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/ohos_var.gni")
import(
    "//foundation/distributedhardware/distributed_camera/distributedcamera.gni")

ohos_shared_library("distributed_camera_data_process") {
  include_dirs = [
    "//third_party/ffmpeg/",
    "//commonlibrary/c_utils/base/include",
    "//utils/system/safwk/native/include",
    "//foundation/graphic/graphic_2d/interfaces/innerkits/common",
    "//foundation/graphic/graphic_2d/interfaces/innerkits/surface",
    "//foundation/multimedia/player_framework/interfaces/innerkits/native/media/include",
    "${fwk_common_path}/utils/include",
    "${fwk_utils_path}/include/eventbus",
  ]

  include_dirs += [
    "include/interfaces",
    "include/eventbus",
    "include/pipeline",
    "include/utils",
    "include/pipeline_node/multimedia_codec/decoder",
    "include/pipeline_node/multimedia_codec/encoder",
    "include/pipeline_node/colorspace_conversion",
    "include/pipeline_node/fpscontroller",
    "include/pipeline_node/scale_conversion",
    "${common_path}/include/constants",
    "${common_path}/include/utils",
    "${innerkits_path}/native_cpp/camera_source/include",
  ]

  sources = [
    "src/pipeline/abstract_data_process.cpp",
    "src/pipeline/dcamera_pipeline_sink.cpp",
    "src/pipeline/dcamera_pipeline_source.cpp",
    "src/pipeline_node/colorspace_conversion/color_format_process.cpp",
    "src/pipeline_node/fpscontroller/fps_controller_process.cpp",
    "src/pipeline_node/multimedia_codec/decoder/decode_surface_listener.cpp",
    "src/pipeline_node/multimedia_codec/decoder/decode_video_callback.cpp",
    "src/pipeline_node/multimedia_codec/encoder/encode_video_callback.cpp",
    "src/pipeline_node/scale_conversion/scale_convert_process.cpp",
    "src/utils/image_common_type.cpp",
  ]

  if (!distributed_camera_common) {
    sources += [
      "src/pipeline_node/multimedia_codec/decoder/decode_data_process.cpp",
      "src/pipeline_node/multimedia_codec/encoder/encode_data_process.cpp",
    ]
  } else {
    sources += [
      "src/pipeline_node/multimedia_codec/decoder/decode_data_process_common.cpp",
      "src/pipeline_node/multimedia_codec/encoder/encode_data_process_common.cpp",
    ]
  }

  deps = [
    "${common_path}:distributed_camera_utils",
    "//foundation/graphic/graphic_2d/frameworks/surface:surface",
    "//third_party/ffmpeg:libohosffmpeg",
  ]

  defines = [
    "HI_LOG_ENABLE",
    "DH_LOG_TAG=\"dcameradataproc\"",
    "LOG_DOMAIN=0xD004100",
  ]

  external_deps = [
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hitrace_native:hitrace_meter",
    "multimedia_player_framework:media_client",
  ]

  subsystem_name = "distributedhardware"

  part_name = "distributed_camera"
}
