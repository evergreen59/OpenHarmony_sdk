# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimedia/av_session/config.gni")

config("avsession_client_config") {
  include_dirs = [
    "//foundation/multimedia/av_session/frameworks/native/session/include",
    "//foundation/multimedia/av_session/interfaces/inner_api/native/session/include",
    "//foundation/multimedia/av_session/services/session/ipc/base",
    "//foundation/multimedia/av_session/services/session/ipc/proxy",
    "//foundation/multimedia/av_session/services/session/ipc/stub",
  ]
}

ohos_shared_library("avsession_client") {
  install_enable = true
  sanitize = {
    cfi = true
    debug = false
  }
  ipc_sources = [
    "//foundation/multimedia/av_session/services/session/ipc/proxy/avsession_controller_proxy.cpp",
    "//foundation/multimedia/av_session/services/session/ipc/proxy/avsession_proxy.cpp",
    "//foundation/multimedia/av_session/services/session/ipc/proxy/avsession_service_proxy.cpp",
    "//foundation/multimedia/av_session/services/session/ipc/stub/avcontroller_callback_stub.cpp",
    "//foundation/multimedia/av_session/services/session/ipc/stub/avsession_callback_stub.cpp",
    "//foundation/multimedia/av_session/services/session/ipc/stub/session_listener_stub.cpp",
  ]

  client_sources = [
    "src/avcontroller_callback_client.cpp",
    "src/avsession_callback_client.cpp",
    "src/avsession_manager.cpp",
    "src/avsession_manager_impl.cpp",
    "src/avsession_pixel_map_adapter.cpp",
    "src/session_listener_client.cpp",
  ]

  sources = ipc_sources + client_sources

  public_configs = [ ":avsession_client_config" ]

  public_deps = [
    "//foundation/multimedia/av_session/frameworks/common:avsession_common",
    "//foundation/multimedia/av_session/utils:avsession_utils",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:wantagent_innerkits",
    "c_utils:utils",
    "hiviewdfx_hilog_native:libhilog",
    "input:libmmi-client",
    "ipc:ipc_core",
    "multimedia_audio_framework:audio_client",
    "multimedia_image_framework:image_native",
    "samgr:samgr_proxy",
  ]

  if (multimedia_av_session_enable_trace_control) {
    cflags = [ "-DENBABLE_AVSESSION_TRACE_CONTROL" ]
    external_deps += [ "hitrace_native:hitrace_meter" ]
  }
  if (multimedia_av_session_enable_sysevent_control) {
    cflags += [ "-DENABLE_AVSESSION_SYSEVENT_CONTROL" ]
    external_deps += [ "hisysevent_native:libhisysevent" ]
  }

  subsystem_name = "multimedia"
  part_name = "multimedia_av_session"
}
