# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

ohos_shared_library("camera_service") {
  install_enable = true
  sources = [
    "binder/client/src/hcamera_device_callback_proxy.cpp",
    "binder/client/src/hcamera_listener_proxy.cpp",
    "binder/client/src/hcamera_service_callback_proxy.cpp",
    "binder/client/src/hcapture_session_callback_proxy.cpp",
    "binder/client/src/hstream_capture_callback_proxy.cpp",
    "binder/client/src/hstream_repeat_callback_proxy.cpp",
    "binder/server/src/hcamera_device_stub.cpp",
    "binder/server/src/hcamera_service_stub.cpp",
    "binder/server/src/hcapture_session_stub.cpp",
    "binder/server/src/hstream_capture_stub.cpp",
    "binder/server/src/hstream_metadata_stub.cpp",
    "binder/server/src/hstream_repeat_stub.cpp",
    "src/camera_util.cpp",
    "src/hcamera_device.cpp",
    "src/hcamera_host_manager.cpp",
    "src/hcamera_service.cpp",
    "src/hcapture_session.cpp",
    "src/hstream_capture.cpp",
    "src/hstream_common.cpp",
    "src/hstream_metadata.cpp",
    "src/hstream_repeat.cpp",
  ]
  cflags = [
    "-fPIC",
    "-Wall",
  ]

  include_dirs = [
    "//drivers/peripheral/camera/interfaces/metadata/include",
    "//drivers/peripheral/display/interfaces/include",
    "//foundation/graphic/graphic_2d/frameworks/surface/include",
    "//foundation/multimedia/camera_framework/services/camera_service/include",
    "//foundation/multimedia/camera_framework/services/camera_service/binder/base/include",
    "//foundation/multimedia/camera_framework/services/camera_service/binder/client/include",
    "//foundation/multimedia/camera_framework/services/camera_service/binder/server/include",
    "//foundation/multimedia/camera_framework/interfaces/inner_api/native/camera/include",
    "//foundation/window/window_manager/interfaces/innerkits/dm",
    "//base/security/access_token/interfaces/innerkits/accesstoken/include",
  ]

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "//drivers/hdf_core/adapter/uhdf2/hdi:libhdi",
    "//drivers/peripheral/camera/interfaces/metadata:metadata",
    "//foundation/graphic/graphic_2d:libsurface",
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client",
    "//foundation/window/window_manager/dm:libdm",
  ]

  external_deps = [
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "hicollie_native:libhicollie",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  include_dirs += [
    "//drivers/peripheral/camera/interfaces/include",
    "//drivers/peripheral/camera/interfaces/hdi_ipc",
    "//drivers/peripheral/camera/interfaces/hdi_ipc/utils/include",
    "//drivers/peripheral/camera/interfaces/hdi_ipc/callback/device/include",
    "//drivers/peripheral/camera/interfaces/hdi_ipc/callback/operator/include",
    "//drivers/peripheral/camera/interfaces/hdi_ipc/callback/host/include",
  ]

  deps += [ "//drivers/interface/camera/v1_0:libcamera_proxy_1.0" ]

  if (use_musl) {
    if (use_jemalloc && use_jemalloc_dfx_intf) {
      cflags += [ "-DCONFIG_USE_JEMALLOC_DFX_INTF" ]
    }
  }

  cflags_cc = cflags

  part_name = "multimedia_camera_framework"
  subsystem_name = "multimedia"
}
