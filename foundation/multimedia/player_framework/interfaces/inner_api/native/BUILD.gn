# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimedia/player_framework/config.gni")

MEDIA_ROOT_DIR = "//foundation/multimedia/player_framework"

config("media_client_local_config") {
  include_dirs = [
    "$MEDIA_ROOT_DIR/services/services/sa_media/client",
    "$MEDIA_ROOT_DIR/services/services/player/server",
    "$MEDIA_ROOT_DIR/services/services/recorder/server",
    "$MEDIA_ROOT_DIR/services/services/avmetadatahelper/server",
    "$MEDIA_ROOT_DIR/services/services/avcodec/server",
    "$MEDIA_ROOT_DIR/services/services/factory",
    "$MEDIA_ROOT_DIR/services/services/engine_intf",
    "$MEDIA_ROOT_DIR/services/services/avcodeclist/server",
    "$MEDIA_ROOT_DIR/services/services/recorder_profiles/server",
    "$MEDIA_ROOT_DIR/services/services/avmuxer/server",
  ]
}

config("media_client_ipc_config") {
  include_dirs = [
    "$MEDIA_ROOT_DIR/services/services/sa_media/client",
    "$MEDIA_ROOT_DIR/services/services/sa_media/ipc",
    "$MEDIA_ROOT_DIR/services/services/player/client",
    "$MEDIA_ROOT_DIR/services/services/player/ipc",
    "$MEDIA_ROOT_DIR/services/services/media_data_source/ipc",
    "$MEDIA_ROOT_DIR/services/services/recorder/client",
    "$MEDIA_ROOT_DIR/services/services/recorder/ipc",
    "$MEDIA_ROOT_DIR/services/services/avmetadatahelper/client",
    "$MEDIA_ROOT_DIR/services/services/avmetadatahelper/ipc",
    "$MEDIA_ROOT_DIR/services/services/common",
    "$MEDIA_ROOT_DIR/services/services/avcodec/client",
    "$MEDIA_ROOT_DIR/services/services/avcodec/ipc",
    "$MEDIA_ROOT_DIR/services/services/avcodeclist/client",
    "$MEDIA_ROOT_DIR/services/services/avcodeclist/ipc",
    "$MEDIA_ROOT_DIR/services/services/recorder_profiles/client",
    "$MEDIA_ROOT_DIR/services/services/recorder_profiles/ipc",
    "$MEDIA_ROOT_DIR/services/services/avmuxer/client",
    "$MEDIA_ROOT_DIR/services/services/avmuxer/ipc",
  ]
}

config("media_client_public_config") {
  include_dirs = [
    "$MEDIA_ROOT_DIR/interfaces/inner_api/native",
    "$MEDIA_ROOT_DIR/services/include",
    "$MEDIA_ROOT_DIR/services/utils/include",
    "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
    "//utils/system/safwk/native/include",
    "//third_party/bounds_checking_function/include",
    "//commonlibrary/c_utils/base/include",
    "//foundation/multimedia/image_framework/interfaces/innerkits/include",
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiocommon/include",
    "//foundation/multimedia/audio_framework/interfaces/kits/js/audio_capturer/include",
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiocapturer/include",
  ]

  cflags = [
    "-fno-exceptions",
    "-Wall",
    "-fno-common",
    "-fstack-protector-strong",
    "-Wshadow",
    "-FPIC",
    "-FS",
    "-O2",
    "-D_FORTIFY_SOURCE=2",
    "-Wformat=2",
    "-Wdate-time",
  ]

  cflags_cc = [
    "-std=c++17",
    "-fno-rtti",
  ]

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  defines = []
  defines += player_framework_defines
}

ohos_shared_library("media_client") {
  install_enable = true
  if (defined(ohos_lite)) {
    sources = [
      "$MEDIA_ROOT_DIR/frameworks/native/common/media_errors.cpp",
      "$MEDIA_ROOT_DIR/services/services/factory/engine_factory_repo.cpp",
      "$MEDIA_ROOT_DIR/services/services/sa_media/client/media_local.cpp",
    ]
    if (multimedia_player_framework_support_player) {
      sources += [
        "$MEDIA_ROOT_DIR/frameworks/native/player/player_impl.cpp",
        "$MEDIA_ROOT_DIR/services/services/player/server/player_server.cpp",
      ]
    }
    if (multimedia_player_framework_support_recorder) {
      sources += [
        "$MEDIA_ROOT_DIR/frameworks/native/recorder/recorder_impl.cpp",
        "$MEDIA_ROOT_DIR/frameworks/native/recorder_profiles/recorder_profiles_impl.cpp",
        "$MEDIA_ROOT_DIR/services/services/recorder/server/recorder_server.cpp",
        "$MEDIA_ROOT_DIR/services/services/recorder_profiles/server/recorder_profiles_server.cpp",
      ]
    }
    if (multimedia_player_framework_support_codec) {
      sources += [
        "$MEDIA_ROOT_DIR/frameworks/native/avcodec/avcodec_audio_decoder_impl.cpp",
        "$MEDIA_ROOT_DIR/frameworks/native/avcodec/avcodec_audio_encoder_impl.cpp",
        "$MEDIA_ROOT_DIR/frameworks/native/avcodec/avcodec_video_decoder_impl.cpp",
        "$MEDIA_ROOT_DIR/frameworks/native/avcodec/avcodec_video_encoder_impl.cpp",
        "$MEDIA_ROOT_DIR/frameworks/native/avcodeclist/avcodec_info.cpp",
        "$MEDIA_ROOT_DIR/frameworks/native/avcodeclist/avcodec_list_impl.cpp",
        "$MEDIA_ROOT_DIR/services/services/avcodec/server/avcodec_server.cpp",
        "$MEDIA_ROOT_DIR/services/services/avcodeclist/server/avcodeclist_server.cpp",
      ]
    }
    if (multimedia_player_framework_support_muxer) {
      sources += [
        "$MEDIA_ROOT_DIR/frameworks/native/avmuxer/avmuxer_impl.cpp",
        "$MEDIA_ROOT_DIR/services/services/avmuxer/server/avmuxer_server.cpp",
      ]
    }
    if (multimedia_player_framework_support_metadata) {
      sources += [
        "$MEDIA_ROOT_DIR/frameworks/native/avmetadatahelper/avmetadatahelper_impl.cpp",
        "$MEDIA_ROOT_DIR/services/services/avmetadatahelper/server/avmetadatahelper_server.cpp",
      ]
    }

    public_configs = [
      ":media_client_local_config",
      ":media_client_public_config",
    ]

    deps = [
      "$MEDIA_ROOT_DIR/services/utils:media_format",
      "//third_party/bounds_checking_function:libsec_static",
    ]

    if (multimedia_player_framework_support_video) {
      public_configs += [ "//foundation/graphic/graphic_2d/frameworks/surface:surface_public_config" ]
      deps += [
        "//foundation/graphic/graphic_2d/frameworks/surface:surface",
        "//foundation/multimedia/image_framework/interfaces/innerkits:image_native",
      ]
    }

    external_deps = [
      "c_utils:utils",
      "hiviewdfx_hilog_native:libhilog",
      "ipc:ipc_core",
    ]
  } else {
    sources = [
      "$MEDIA_ROOT_DIR/frameworks/native/common/media_errors.cpp",
      "$MEDIA_ROOT_DIR/services/services/common/avsharedmemory_ipc.cpp",
      "$MEDIA_ROOT_DIR/services/services/sa_media/client/media_client.cpp",
      "$MEDIA_ROOT_DIR/services/services/sa_media/ipc/media_listener_stub.cpp",
      "$MEDIA_ROOT_DIR/services/services/sa_media/ipc/media_parcel.cpp",
      "$MEDIA_ROOT_DIR/services/services/sa_media/ipc/media_service_proxy.cpp",
      "$MEDIA_ROOT_DIR/services/utils/avsharedmemorybase.cpp",
    ]
    if (multimedia_player_framework_support_player) {
      sources += [
        "$MEDIA_ROOT_DIR/frameworks/native/player/player_impl.cpp",
        "$MEDIA_ROOT_DIR/services/services/media_data_source/ipc/media_data_source_stub.cpp",
        "$MEDIA_ROOT_DIR/services/services/player/client/player_client.cpp",
        "$MEDIA_ROOT_DIR/services/services/player/ipc/player_listener_stub.cpp",
        "$MEDIA_ROOT_DIR/services/services/player/ipc/player_service_proxy.cpp",
      ]
    }
    if (multimedia_player_framework_support_recorder) {
      sources += [
        "$MEDIA_ROOT_DIR/frameworks/native/recorder/recorder_impl.cpp",
        "$MEDIA_ROOT_DIR/frameworks/native/recorder_profiles/recorder_profiles_impl.cpp",
        "$MEDIA_ROOT_DIR/services/services/recorder/client/recorder_client.cpp",
        "$MEDIA_ROOT_DIR/services/services/recorder/ipc/recorder_listener_stub.cpp",
        "$MEDIA_ROOT_DIR/services/services/recorder/ipc/recorder_service_proxy.cpp",
        "$MEDIA_ROOT_DIR/services/services/recorder_profiles/client/recorder_profiles_client.cpp",
        "$MEDIA_ROOT_DIR/services/services/recorder_profiles/ipc/recorder_profiles_service_proxy.cpp",
        "$MEDIA_ROOT_DIR/services/services/sa_media/ipc/recorder_profiles_parcel.cpp",
      ]
    }
    if (multimedia_player_framework_support_codec) {
      sources += [
        "$MEDIA_ROOT_DIR/frameworks/native/avcodec/avcodec_audio_decoder_impl.cpp",
        "$MEDIA_ROOT_DIR/frameworks/native/avcodec/avcodec_audio_encoder_impl.cpp",
        "$MEDIA_ROOT_DIR/frameworks/native/avcodec/avcodec_video_decoder_impl.cpp",
        "$MEDIA_ROOT_DIR/frameworks/native/avcodec/avcodec_video_encoder_impl.cpp",
        "$MEDIA_ROOT_DIR/frameworks/native/avcodeclist/avcodec_info.cpp",
        "$MEDIA_ROOT_DIR/frameworks/native/avcodeclist/avcodec_list_impl.cpp",
        "$MEDIA_ROOT_DIR/services/services/avcodec/client/avcodec_client.cpp",
        "$MEDIA_ROOT_DIR/services/services/avcodec/ipc/avcodec_listener_stub.cpp",
        "$MEDIA_ROOT_DIR/services/services/avcodec/ipc/avcodec_service_proxy.cpp",
        "$MEDIA_ROOT_DIR/services/services/avcodeclist/client/avcodeclist_client.cpp",
        "$MEDIA_ROOT_DIR/services/services/avcodeclist/ipc/avcodeclist_service_proxy.cpp",
        "$MEDIA_ROOT_DIR/services/services/sa_media/ipc/avcodeclist_parcel.cpp",
      ]
    }
    if (multimedia_player_framework_support_muxer) {
      sources += [
        "$MEDIA_ROOT_DIR/frameworks/native/avmuxer/avmuxer_impl.cpp",
        "$MEDIA_ROOT_DIR/services/services/avmuxer/client/avmuxer_client.cpp",
        "$MEDIA_ROOT_DIR/services/services/avmuxer/ipc/avmuxer_service_proxy.cpp",
      ]
    }
    if (multimedia_player_framework_support_metadata) {
      sources += [
        "$MEDIA_ROOT_DIR/frameworks/native/avmetadatahelper/avmetadatahelper_impl.cpp",
        "$MEDIA_ROOT_DIR/services/services/avmetadatahelper/client/avmetadatahelper_client.cpp",
        "$MEDIA_ROOT_DIR/services/services/avmetadatahelper/ipc/avmetadatahelper_service_proxy.cpp",
      ]
    }

    public_configs = [
      ":media_client_ipc_config",
      ":media_client_public_config",
    ]

    deps = [
      "//foundation/multimedia/player_framework/services/utils:media_format",
      "//third_party/bounds_checking_function:libsec_static",
    ]

    if (multimedia_player_framework_support_video) {
      public_configs += [ "//foundation/graphic/graphic_2d/frameworks/surface:surface_public_config" ]
      deps += [
        "//foundation/graphic/graphic_2d/frameworks/surface:surface",
        "//foundation/multimedia/image_framework/interfaces/innerkits:image_native",
      ]
    }

    external_deps = [
      "c_utils:utils",
      "hiviewdfx_hilog_native:libhilog",
      "ipc:ipc_core",
      "samgr:samgr_proxy",
    ]
  }

  subsystem_name = "multimedia"
  part_name = "multimedia_player_framework"
}
