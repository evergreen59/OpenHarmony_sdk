# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#####################hydra-fuzz###################
import("//build/config/features.gni")
import("//build/test.gni")
import("//foundation/multimedia/player_framework/config.gni")
module_output_path = "player_framework/media_player"
MEDIA_ROOT_DIR = "//foundation/multimedia/player_framework/"

##############################fuzztest##########################################
ohos_fuzztest("PlayerServiceStubFuzzTest") {
  module_out_path = module_output_path
  fuzz_config_file =
      "$MEDIA_ROOT_DIR/test/fuzztest/player_fuzztest/playerservicestub_fuzzer"

  include_dirs = [
    "//foundation/window/window_manager/interfaces/innerkits/wm",
    "$MEDIA_ROOT_DIR/test/fuzztest/common/",
    "//graphic/graphic_2d/interfaces/innerkits/surface",
    "//base/security/access_token/interfaces/innerkits/access_token/include",
    "//base/hiviewdfx/hisysevent/interfaces/native/innerkits/hisysevent/include",
    "//foundation/multimedia/player_framework/services/include",
    "//foundation/multimedia/player_framework/services/services/factory",
    "//foundation/multimedia/player_framework/services/services/engine_intf",
    "//foundation/multimedia/player_framework/services/utils/include",
    "//foundation/multimedia/player_framework/interfaces/inner_api/native",
    "//foundation/multimedia/player_framework/services/services/common",
    "//commonlibrary/c_utils/base/include",
    "//foundation/multimedia/image_standard/interfaces/innerkits/include",
    "//foundation/multimedia/player_framework/services/engine/common/avcodeclist",
    "//foundation/multimedia/player_framework/services/engine/common/recorder_profiles",
    "$MEDIA_ROOT_DIR/services/services/sa_media/ipc",
    "$MEDIA_ROOT_DIR/services/services/sa_media/server",
    "$MEDIA_ROOT_DIR/services/services/common",
    "$MEDIA_ROOT_DIR/services/services/player/ipc",
    "$MEDIA_ROOT_DIR/services/services/player/server",
    "$MEDIA_ROOT_DIR/services/services/recorder/ipc",
    "$MEDIA_ROOT_DIR/services/services/recorder/server",
    "$MEDIA_ROOT_DIR/services/services/avmetadatahelper/ipc",
    "$MEDIA_ROOT_DIR/services/services/avmetadatahelper/server",
    "$MEDIA_ROOT_DIR/services/services/avcodec/ipc",
    "$MEDIA_ROOT_DIR/services/services/avcodec/server",
    "$MEDIA_ROOT_DIR/services/services/avcodeclist/ipc",
    "$MEDIA_ROOT_DIR/services/services/avcodeclist/server",
    "$MEDIA_ROOT_DIR/services/services/recorder_profiles/ipc",
    "$MEDIA_ROOT_DIR/services/services/recorder_profiles/server",
    "$MEDIA_ROOT_DIR/services/services/avmuxer/ipc",
    "$MEDIA_ROOT_DIR/services/services/avmuxer/server",
    "$MEDIA_ROOT_DIR/services/services/media_data_source/ipc",
    "$MEDIA_ROOT_DIR/services/services/media_data_source/server",
  ]
  cflags = [
    "-std=c++17",
    "-fno-rtti",
    "-fno-exceptions",
    "-Wall",
    "-fno-common",
    "-fstack-protector-strong",
    "-Wshadow",
    "-FPIC",
    "-FS",
    "-O2",
    "-D_FORTIFY_SOURCE=2",
    "-fvisibility=hidden",
    "-Wformat=2",
    "-Wfloat-equal",
    "-Wdate-time",
    "-Werror",
    "-Wextra",
    "-Wimplicit-fallthrough",
    "-Wsign-compare",
    "-Wunused-parameter",
    "-DBINDER_IPC_32BIT",
  ]
  if (multimedia_player_framework_support_player) {
    sources = [ "playerservicestub_fuzzer.cpp" ]
  }
  deps = [
    "$MEDIA_ROOT_DIR/services/services:media_service",
    "//foundation/graphic/graphic_2d:libsurface",
    "//foundation/graphic/graphic_2d/frameworks/surface:surface",
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client",
    "//foundation/multimedia/player_framework/services/dfx:media_service_dfx",
    "//foundation/multimedia/player_framework/services/utils:media_format",
    "//foundation/multimedia/player_framework/services/utils:media_service_utils",
    "//foundation/window/window_manager/wm:libwm",
    "//third_party/libxml2:xml2",
  ]
  external_deps = [
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "multimedia_player_framework:media_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}
