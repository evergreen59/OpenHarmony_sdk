{
    "toolsParam": {
        "removeExplains": "/*\n* Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd. \n* Licensed under the Apache License, Version 2.0 (the \"License\"); \n* you may not use this file except in compliance with the License. \n* You may obtain a copy of the License at \n*\n* http://www.apache.org/licenses/LICENSE-2.0 \n*\n* Unless required by applicable law or agreed to in writing, software \n* distributed under the License is distributed on an \"AS IS\" BASIS, \n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n* See the License for the specific language governing permissions and \n* limitations under the License. \n*/\nimport { AsyncCallback, Callback } from './basic';\n\ndeclare namespace napitest {\n\n    //test remove Explains\n    function fun1(v1: { [key: string]: Array<string> }):void;\n}\n\nexport default napitest;\n",
        "removeEmptyLine": "\"\\ndeclare namespace napitest {\\ninterface Human {\\nname: string;\\nage: number;\\n}\\ninterface TestClass1 {\\nahuman: Human;\\nnum1: number;\\nstr1: string;\\nnums: Array<number>;\\nstrs: Array<string>;\\nmans: Array<Human>;\\nif_direct(v1: string): string;\\nif_callback(v1: string, cb: Callback<string>): string;\\nif_async(v1: string, cb: AsyncCallback<string>): string;\\n}\\nfunction fun2(v2: string, numcc: Array<number>, mancc: Human): Array<Human>;\\nfunction fun3(v2: string, cb: Callback<string>): void;\\nfunction fun4(v2: string, cb: AsyncCallback<string>): void;\\nnamespace Space3 {\\nfunction fun3(v3: string): string;\\ninterface TestClass2 {\\nhaha: number;\\n}\\nnamespace Space4 {\\nfunction fun3(v3: string): string;\\ninterface TestClass3 {\\nhoho: number;\\nadd(v1: Array<number>): number;\\n}\\n}\\n}\\n}\\nexport default napitest;\"",
        "replaceAll": "\"\\nstruct if_direct_value_struct {[valueIn]\\n    \\n    [valueOut]\\n};\\n\\n[static_define]napi_value if_direct_middle(napi_env env, napi_callback_info info)\\n{\\n    XNapiTool *pxt = std::make_unique<XNapiTool>(env, info).release();\\n    if (pxt->IsFailed())\\n    {\\n        napi_value err = pxt->GetError();\\n        delete pxt;\\n        return err;\\n    }\\n    [unwarp_instance]\\n\\n    struct [funcName]_value_struct *vio=new [funcName]_value_struct();\\n    \\n    [valueCheckout]\\n\\n    [callFunc]\\n\\n    [valuePackage]\\n\\n    delete vio;\\n    if (pxt->IsFailed())\\n        result = pxt->GetError();\\n    delete pxt;// release\\n    return result;\\n}\"",
        "analyzeFileParam": "\"declare namespace napitest {\\ninterface Human {\\nname: string;\\nage: number;\\n}\\ninterface TestClass1 {\\nahuman: Human;\\nnum1: number;\\nstr1: string;\\nnums: Array<number>;\\nstrs: Array<string>;\\nmans: Array<Human>;\\nif_direct(v1: string): string;\\nif_callback(v1: string, cb: Callback<string>): string;\\nif_async(v1: string, cb: AsyncCallback<string>): string;\\n}\\nfunction fun2(v2: string, numcc: Array<number>, mancc: Human): Array<Human>;\\nfunction fun3(v2: string, cb: Callback<string>): void;\\nfunction fun4(v2: string, cb: AsyncCallback<string>): void;\\nnamespace Space3 {\\nfunction fun3(v3: string): string;\\ninterface TestClass2 {\\nhaha: number;\\n}\\nnamespace Space4 {\\nfunction fun3(v3: string): string;\\ninterface TestClass3 {\\nhoho: number;\\nadd(v1: Array<number>): number;\\n}\\n}\\n}\\n}\\nexport default napitest;\""
    },
    "tools": {
        "removeExplains": "\ndeclare namespace napitest {    function fun1(v1: string):void;\n}\n\nexport default napitest;\n",
        "removeEmptyLine": "\"\\\"\\\\\\\"\\\\\\\\ndeclare namespace napitest {\\\\\\\\ninterface Human {\\\\\\\\nname: string;\\\\\\\\nage: number;\\\\\\\\n}\\\\\\\\ninterface TestClass1 {\\\\\\\\nahuman: Human;\\\\\\\\nnum1: number;\\\\\\\\nstr1: string;\\\\\\\\nnums: Array<number>;\\\\\\\\nstrs: Array<string>;\\\\\\\\nmans: Array<Human>;\\\\\\\\nif_direct(v1: string): string;\\\\\\\\nif_callback(v1: string, cb: Callback<string>): string;\\\\\\\\nif_async(v1: string, cb: AsyncCallback<string>): string;\\\\\\\\n}\\\\\\\\nfunction fun2(v2: string, numcc: Array<number>, mancc: Human): Array<Human>;\\\\\\\\nfunction fun3(v2: string, cb: Callback<string>): void;\\\\\\\\nfunction fun4(v2: string, cb: AsyncCallback<string>): void;\\\\\\\\nnamespace Space3 {\\\\\\\\nfunction fun3(v3: string): string;\\\\\\\\ninterface TestClass2 {\\\\\\\\nhaha: number;\\\\\\\\n}\\\\\\\\nnamespace Space4 {\\\\\\\\nfunction fun3(v3: string): string;\\\\\\\\ninterface TestClass3 {\\\\\\\\nhoho: number;\\\\\\\\nadd(v1: Array<number>): number;\\\\\\\\n}\\\\\\\\n}\\\\\\\\n}\\\\\\\\n}\\\\\\\\nexport default napitest;\\\\\\\"\\\"\"",
        "replaceAll": "\"\\\"\\\\\\\"\\\\\\\\if_directstrif_directif_directt iif_direct_dirif_directif_directt_vif_directlif_directif_direct_strif_directif_directt {[vif_directlif_directif_directIif_direct]\\\\\\\\if_direct    \\\\\\\\if_direct    [vif_directlif_directif_directOif_directt]\\\\\\\\if_direct};\\\\\\\\if_direct\\\\\\\\if_direct[stif_directtiif_direct_dif_directif_directiif_directif_direct]if_directif_directpi_vif_directlif_directif_direct iif_direct_dirif_directif_directt_if_directiddlif_direct(if_directif_directpi_if_directif_directv if_directif_directv, if_directif_directpi_if_directif_directllbif_directif_directk_iif_directif_directo iif_directif_directo)\\\\\\\\if_direct{\\\\\\\\if_direct    Xif_directif_directpiTool *pxt = std::if_directif_directkif_direct_if_directif_directiqif_directif_direct<Xif_directif_directpiTool>(if_directif_directv, iif_directif_directo).rif_directlif_directif_directsif_direct();\\\\\\\\if_direct    iif_direct (pxt->IsFif_directilif_directd())\\\\\\\\if_direct    {\\\\\\\\if_direct        if_directif_directpi_vif_directlif_directif_direct if_directrr = pxt->Gif_directtError();\\\\\\\\if_direct        dif_directlif_directtif_direct pxt;\\\\\\\\if_direct        rif_directtif_directrif_direct if_directrr;\\\\\\\\if_direct    }\\\\\\\\if_direct    [if_directif_directwif_directrp_iif_directstif_directif_directif_directif_direct]\\\\\\\\if_direct\\\\\\\\if_direct    strif_directif_directt [if_directif_directif_directif_directif_directif_directif_directif_direct]_vif_directlif_directif_direct_strif_directif_directt *vio=if_directif_directw [if_directif_directif_directif_directif_directif_directif_directif_direct]_vif_directlif_directif_direct_strif_directif_directt();\\\\\\\\if_direct    \\\\\\\\if_direct    [vif_directlif_directif_directChif_directif_directkoif_directt]\\\\\\\\if_direct\\\\\\\\if_direct    [if_directif_directllFif_directif_directif_direct]\\\\\\\\if_direct\\\\\\\\if_direct    [vif_directlif_directif_directPif_directif_directkif_directgif_direct]\\\\\\\\if_direct\\\\\\\\if_direct    dif_directlif_directtif_direct vio;\\\\\\\\if_direct    iif_direct (pxt->IsFif_directilif_directd())\\\\\\\\if_direct        rif_directsif_directlt = pxt->Gif_directtError();\\\\\\\\if_direct    dif_directlif_directtif_direct pxt;// rif_directlif_directif_directsif_direct\\\\\\\\if_direct    rif_directtif_directrif_direct rif_directsif_directlt;\\\\\\\\if_direct}\\\\\\\"\\\"\"",
        "checkOutBody": "null"
    },
    "Analyze": {
        "analyzeInterface": "{\"value\":[{\"name\":\"str1\",\"type\":\"string\"},{\"name\":\"nums\",\"type\":\"Array<NUMBER_TYPE_19>\"},{\"name\":\"strs\",\"type\":\"Array<string>\"}],\"function\":[{\"name\":\"if_direct\",\"type\":1,\"value\":[{\"name\":\"v1\",\"type\":\"string\"},{\"name\":\"v2\",\"type\":\"boolean\"}],\"ret\":\"string\"},{\"name\":\"if_callback\",\"type\":2,\"value\":[{\"name\":\"v1\",\"type\":\"string\"},{\"name\":\"cb\",\"type\":\"Callback<string>\"}],\"ret\":\"string\"},{\"name\":\"if_async\",\"type\":4,\"value\":[{\"name\":\"v1\",\"type\":\"string\"},{\"name\":\"cb\",\"type\":\"AsyncCallback<string>\"}],\"ret\":\"string\"}]}",
        "analyzeNamespace": "{\"exports\":[],\"enum\":[],\"const\":[],\"type\":[],\"function\":[],\"interface\":[],\"class\":[],\"namespace\":[{\"name\":\"Space3\",\"body\":{\"exports\":[],\"enum\":[{\"name\":\"EventType\",\"body\":{\"element\":[{\"name\":\"FAULT\",\"value\":\"1\",\"type\":\"NUMBER_TYPE_20\"},{\"name\":\"STATISTIC\",\"value\":\"2\",\"type\":\"NUMBER_TYPE_21\"}],\"function\":[],\"enumValueType\":0}}],\"const\":[],\"type\":[],\"function\":[{\"name\":\"fun1\",\"type\":1,\"value\":[{\"name\":\"v\",\"type\":\"Array<boolean>\"}],\"ret\":\"Human\"},{\"name\":\"fun3\",\"type\":4,\"value\":[{\"name\":\"v\",\"type\":\"AsyncCallback<string>\"}],\"ret\":\"string[]\"},{\"name\":\"fun4\",\"type\":2,\"value\":[{\"name\":\"v\",\"type\":\"Callback<Human>\"}],\"ret\":\"void\"},{\"name\":\"fun6\",\"type\":1,\"value\":[{\"name\":\"v\",\"type\":\"Map<string,string>\"}],\"ret\":\"NUMBER_TYPE_23\"},{\"name\":\"fun7\",\"type\":1,\"value\":[{\"name\":\"v\",\"type\":\"{[key:string]:EventType}\"}],\"ret\":\"NUMBER_TYPE_24\"}],\"interface\":[{\"name\":\"Human\",\"body\":{\"value\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"year\",\"type\":\"NUMBER_TYPE_22\"}],\"function\":[]}}],\"class\":[],\"namespace\":[]}}]}",
        "analyzeDirectFunction": "{\"name\":\"if_direct\",\"type\":1,\"value\":[{\"name\":\"v1\",\"type\":\"string\"},{\"name\":\"v2\",\"type\":\"boolean\"}],\"ret\":\"asdfgh\"}",
        "analyzeSyncFunction": "{\"name\":\"if_callback\",\"type\":2,\"value\":[{\"name\":\"v1\",\"type\":\"string\"},{\"name\":\"cb\",\"type\":\"Callback<Array<string>>\"}],\"ret\":\"zxcvbn\"}",
        "analyzeAsyncFunction": "{\"name\":\"if_async\",\"type\":4,\"value\":[{\"name\":\"v1\",\"type\":\"string\"},{\"name\":\"cb\",\"type\":\"AsyncCallback<string>\"}],\"ret\":\"qwerty\"}",
        "analyzeDirectParams": "[[{\"name\":\"v1\",\"type\":\"string\"},{\"name\":\"v2\",\"type\":\"boolean\"}],1]",
        "analyzeAsynctParams": "[[{\"name\":\"v2\",\"type\":\"string\"},{\"name\":\"cb\",\"type\":\"AsyncCallback<string>\"}],4]",
        "analyzeSynctParams": "[[{\"name\":\"v2\",\"type\":\"boolean\"},{\"name\":\"cb\",\"type\":\"Callback<boolean>\"}],2]",
        "analyzeArrayParams": "[[{\"name\":\"v1\",\"type\":\"Array<number>\"},{\"name\":\"v2\",\"type\":\"Map<string,boolean>\"}],1]",
        "analyzeMapParams": "[[{\"name\":\"v1\",\"type\":\"string[]\"},{\"name\":\"v2\",\"type\":\"{[key:string]:boolean}\"}],1]",
        "analyzeStringEnum": "{\"element\":[{\"name\":\"FAULT\",\"value\":\"1\",\"type\":\"NUMBER_TYPE_12\"},{\"name\":\"STATISTIC\",\"value\":\"2\",\"type\":\"NUMBER_TYPE_13\"},{\"name\":\"SECURITY\",\"value\":\"3\",\"type\":\"NUMBER_TYPE_14\"},{\"name\":\"BEHAVIOR\",\"value\":\"4\",\"type\":\"NUMBER_TYPE_15\"}],\"function\":[],\"enumValueType\":0}",
        "analyzeEnumStringResult": "{\"element\":[{\"name\":\"\",\"value\":\"\",\"type\":\"\"},{\"name\":\"STATUS0\",\"value\":\"0\",\"type\":\"NUMBER_TYPE_16\"}],\"function\":[],\"enumValueType\":0}",
        "analyzeSubInterface": "{\"value\":[{\"name\":\"num1\",\"type\":\"NUMBER_TYPE_17\"},{\"name\":\"str1\",\"type\":\"string\"},{\"name\":\"nums\",\"type\":\"Array<NUMBER_TYPE_18>\"},{\"name\":\"strs\",\"type\":\"Array<string>\"}],\"function\":[]}",
        "getFuncParaType": "{\"name\":\"v1\",\"type\":\"string\"}",
        "parseNamespace": "\"\\n\"",
        "parseEnum": "\"\\nfunction fun1(name: string, flags: EventType): EventType;\\n\"",
        "parseFunction": "\"\"",
        "parseInterface": "\"\\nfunction fun1(v: ConfigOption): void\\n\"",
        "analyzeNumberEnum": "{\"element\":[{\"name\":\"DEFAULT\",\"value\":\"\",\"type\":\"string\"},{\"name\":\"DENIED\",\"value\":\"-1\",\"type\":\"string\"},{\"name\":\"GRANTED\",\"value\":\"2\",\"type\":\"string\"}],\"function\":[],\"enumValueType\":1}",
        "analyzeFile": "\"{\\\"exportDefault\\\":[\\\"napitest\\\"],\\\"exports\\\":[],\\\"declareType\\\":[],\\\"declareFunction\\\":[],\\\"declareNamespace\\\":[{\\\"name\\\":\\\"napitest\\\",\\\"body\\\":{\\\"exports\\\":[\\\"GrantStatus\\\",\\\"HttpStatus\\\"],\\\"enum\\\":[{\\\"name\\\":\\\"GrantStatus\\\",\\\"body\\\":{\\\"element\\\":[{\\\"name\\\":\\\"PERMISSION_DEFAULT\\\",\\\"value\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"PERMISSION_DENIED\\\",\\\"value\\\":\\\"-1\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"PERMISSION_GRANTED\\\",\\\"value\\\":\\\"2\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"PERMISSION_PASS\\\",\\\"value\\\":\\\"3\\\",\\\"type\\\":\\\"string\\\"}],\\\"function\\\":[],\\\"enumValueType\\\":1}},{\\\"name\\\":\\\"HttpStatus\\\",\\\"body\\\":{\\\"element\\\":[{\\\"name\\\":\\\"STATUS0\\\",\\\"value\\\":\\\"0\\\",\\\"type\\\":\\\"NUMBER_TYPE_1\\\"},{\\\"name\\\":\\\"STATUS1\\\",\\\"value\\\":\\\"500\\\",\\\"type\\\":\\\"NUMBER_TYPE_2\\\"},{\\\"name\\\":\\\"STATUS2\\\",\\\"value\\\":\\\"503\\\",\\\"type\\\":\\\"NUMBER_TYPE_3\\\"}],\\\"function\\\":[],\\\"enumValueType\\\":0}}],\\\"const\\\":[],\\\"type\\\":[],\\\"function\\\":[{\\\"name\\\":\\\"fun2\\\",\\\"type\\\":1,\\\"value\\\":[{\\\"name\\\":\\\"v2\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false},{\\\"name\\\":\\\"numcc\\\",\\\"type\\\":\\\"Array<NUMBER_TYPE_7>\\\",\\\"optional\\\":false},{\\\"name\\\":\\\"mancc\\\",\\\"type\\\":\\\"Human\\\",\\\"optional\\\":false}],\\\"ret\\\":\\\"Array<Human>\\\"},{\\\"name\\\":\\\"fun3\\\",\\\"type\\\":2,\\\"value\\\":[{\\\"name\\\":\\\"v2\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false},{\\\"name\\\":\\\"cb\\\",\\\"type\\\":\\\"Callback<string>\\\",\\\"optional\\\":false}],\\\"ret\\\":\\\"void\\\"},{\\\"name\\\":\\\"fun4\\\",\\\"type\\\":4,\\\"value\\\":[{\\\"name\\\":\\\"v2\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false},{\\\"name\\\":\\\"cb\\\",\\\"type\\\":\\\"AsyncCallback<string>\\\",\\\"optional\\\":false}],\\\"ret\\\":\\\"void\\\"},{\\\"name\\\":\\\"fun5\\\",\\\"type\\\":2,\\\"value\\\":[{\\\"name\\\":\\\"v2\\\",\\\"type\\\":\\\"boolean\\\",\\\"optional\\\":false},{\\\"name\\\":\\\"cb\\\",\\\"type\\\":\\\"Callback<boolean>\\\",\\\"optional\\\":false}],\\\"ret\\\":\\\"boolean\\\"},{\\\"name\\\":\\\"fun6\\\",\\\"type\\\":1,\\\"value\\\":[{\\\"name\\\":\\\"v2\\\",\\\"type\\\":\\\"Array<boolean>\\\",\\\"optional\\\":false}],\\\"ret\\\":\\\"boolean\\\"}],\\\"interface\\\":[{\\\"name\\\":\\\"Human\\\",\\\"body\\\":{\\\"value\\\":[{\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"age\\\",\\\"type\\\":\\\"NUMBER_TYPE_4\\\"},{\\\"name\\\":\\\"isAboy\\\",\\\"type\\\":\\\"true\\\"}],\\\"function\\\":[]}},{\\\"name\\\":\\\"TestClass1\\\",\\\"body\\\":{\\\"value\\\":[{\\\"name\\\":\\\"ahuman\\\",\\\"type\\\":\\\"Human\\\"},{\\\"name\\\":\\\"num1\\\",\\\"type\\\":\\\"NUMBER_TYPE_5\\\"},{\\\"name\\\":\\\"str1\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"nums\\\",\\\"type\\\":\\\"Array<NUMBER_TYPE_6>\\\"},{\\\"name\\\":\\\"strs\\\",\\\"type\\\":\\\"Array<string>\\\"},{\\\"name\\\":\\\"mans\\\",\\\"type\\\":\\\"Array<Human>\\\"}],\\\"function\\\":[{\\\"name\\\":\\\"if_direct\\\",\\\"type\\\":1,\\\"value\\\":[{\\\"name\\\":\\\"v1\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false},{\\\"name\\\":\\\"v2\\\",\\\"type\\\":\\\"boolean\\\",\\\"optional\\\":false}],\\\"ret\\\":\\\"string\\\"},{\\\"name\\\":\\\"if_callback\\\",\\\"type\\\":2,\\\"value\\\":[{\\\"name\\\":\\\"v1\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false},{\\\"name\\\":\\\"cb\\\",\\\"type\\\":\\\"Callback<string>\\\",\\\"optional\\\":false}],\\\"ret\\\":\\\"string\\\"},{\\\"name\\\":\\\"if_async\\\",\\\"type\\\":4,\\\"value\\\":[{\\\"name\\\":\\\"v1\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false},{\\\"name\\\":\\\"cb\\\",\\\"type\\\":\\\"AsyncCallback<string>\\\",\\\"optional\\\":false}],\\\"ret\\\":\\\"string\\\"}]}}],\\\"class\\\":[],\\\"namespace\\\":[{\\\"name\\\":\\\"Space3\\\",\\\"body\\\":{\\\"exports\\\":[],\\\"enum\\\":[],\\\"const\\\":[],\\\"type\\\":[],\\\"function\\\":[{\\\"name\\\":\\\"fun3\\\",\\\"type\\\":1,\\\"value\\\":[{\\\"name\\\":\\\"v3\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false}],\\\"ret\\\":\\\"string\\\"}],\\\"interface\\\":[{\\\"name\\\":\\\"TestClass2\\\",\\\"body\\\":{\\\"value\\\":[{\\\"name\\\":\\\"haha\\\",\\\"type\\\":\\\"NUMBER_TYPE_8\\\"}],\\\"function\\\":[]}}],\\\"class\\\":[],\\\"namespace\\\":[{\\\"name\\\":\\\"Space4\\\",\\\"body\\\":{\\\"exports\\\":[],\\\"enum\\\":[],\\\"const\\\":[],\\\"type\\\":[],\\\"function\\\":[{\\\"name\\\":\\\"fun3\\\",\\\"type\\\":1,\\\"value\\\":[{\\\"name\\\":\\\"v3\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false}],\\\"ret\\\":\\\"string\\\"}],\\\"interface\\\":[{\\\"name\\\":\\\"TestClass3\\\",\\\"body\\\":{\\\"value\\\":[{\\\"name\\\":\\\"hoho\\\",\\\"type\\\":\\\"NUMBER_TYPE_9\\\"}],\\\"function\\\":[{\\\"name\\\":\\\"add\\\",\\\"type\\\":1,\\\"value\\\":[{\\\"name\\\":\\\"v1\\\",\\\"type\\\":\\\"Array<NUMBER_TYPE_10>\\\",\\\"optional\\\":false}],\\\"ret\\\":\\\"NUMBER_TYPE_11\\\"}]}}],\\\"class\\\":[],\\\"namespace\\\":[]}}]}}]}}],\\\"declareInterface\\\":[],\\\"declareLicense\\\":[\\\"/*\\\\n* Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd. \\\\n* Licensed under the Apache License, Version 2.0 (the \\\\\\\"License\\\\\\\"); \\\\n* you may not use this file except in compliance with the License. \\\\n* You may obtain a copy of the License at \\\\n*\\\\n* http://www.apache.org/licenses/LICENSE-2.0 \\\\n*\\\\n* Unless required by applicable law or agreed to in writing, software \\\\n* distributed under the License is distributed on an \\\\\\\"AS IS\\\\\\\" BASIS, \\\\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \\\\n* See the License for the specific language governing permissions and \\\\n* limitations under the License. \\\\n*/\\\"]}\""
    },
    "Generate": {
        "generateFunctionSync": "[\"\\nstruct if_callback_value_struct {\\n    std::string in0;\\n    \\n    std::string out;\\n};\\n\\nstatic napi_value if_callback_middle(napi_env env, napi_callback_info info)\\n{\\n    XNapiTool *pxt = std::make_unique<XNapiTool>(env, info).release();\\n    if (pxt->IsFailed()) {\\n        napi_value err = pxt->GetError();\\n        delete pxt;\\n        return err;\\n    }\\n    TestClass1 *pInstance = (TestClass1 *)pxt->UnWarpInstance();\\n\\n    struct if_callback_value_struct *vio = new if_callback_value_struct();\\n    \\n    pxt->SwapJs2CUtf8(pxt->GetArgv(0), vio->in0);\\n\\n    pInstance->if_callback(vio->in0, vio->out);\\n\\n    napi_value result = nullptr;\\n    result = pxt->SwapC2JsUtf8(vio->out.c_str());\\n\\n    {\\n        napi_value args[1] = {result};\\n        pxt->SyncCallBack(pxt->GetArgv(1), 1, args);\\n    }\\n    result = pxt->UndefinedValue();\\n\\n    delete vio;\\n    if (pxt->IsFailed()) {\\n        result = pxt->GetError();\\n    }\\n    delete pxt; // release\\n    return result;\\n}\",\"\\nbool if_callback(std::string &v1, std::string &out);\",\"\\nbool TestClass1::if_callback(std::string &v1, std::string &out)\\n{\\n    return true;\\n}\\n\"]",
        "generateInterface": "{\"implH\":\"\\nclass ConfigOption {\\npublic:\\n    bool disable;\\n    std::map<std::string,std::string> map1;\\n};\",\"implCpp\":\"\",\"middleBody\":\"\\nclass ConfigOption_middle {\\npublic:\\nstatic napi_value constructor(napi_env env, napi_callback_info info)\\n{\\n    XNapiTool *pxt = new XNapiTool(env, info);\\n\\n    ConfigOption *p = new ConfigOption();\\n\\n    napi_value thisvar = pxt->WrapInstance(p, release);\\n\\n    return thisvar;\\n}\\nstatic void release(void *p)\\n{\\n    ConfigOption *p2 = (ConfigOption *)p;\\n    delete p2;\\n}\\n\\n    static napi_value getvalue_disable(napi_env env, napi_callback_info info)\\n    {\\n        XNapiTool *pxt = std::make_unique<XNapiTool>(env, info).release();\\n        ConfigOption *p = (ConfigOption *)pxt->UnWarpInstance();\\n        napi_value result;\\n        result = pxt->SwapC2JsBool(p->disable);\\n        delete pxt;\\n        return result;\\n    }\\n    static napi_value setvalue_disable(napi_env env, napi_callback_info info)\\n    {\\n        std::shared_ptr<XNapiTool> pxt = std::make_shared<XNapiTool>(env, info);\\n        ConfigOption *p = (ConfigOption *)pxt->UnWarpInstance();\\n        BOOLEAN_JS_2_C(pxt->GetArgv(0),bool,p->disable);\\n        return nullptr;\\n    }\\n\\n    static napi_value getvalue_map1(napi_env env, napi_callback_info info)\\n    {\\n        XNapiTool *pxt = std::make_unique<XNapiTool>(env, info).release();\\n        ConfigOption *p = (ConfigOption *)pxt->UnWarpInstance();\\n        napi_value result;\\n        result = nullptr;\\n    for (auto i = p->map1.begin(); i != p->map1.end(); i++)\\n        {\\n            const char * tnv1;\\n            napi_value tnv2 = nullptr;\\n            tnv1 = (i -> first).c_str();\\n        tnv2 = pxt->SwapC2JsUtf8(i->second.c_str());\\n            pxt->SetMapElement(result, tnv1, tnv2);\\n        }\\n        delete pxt;\\n        return result;\\n    }\\n    static napi_value setvalue_map1(napi_env env, napi_callback_info info)\\n    {\\n        std::shared_ptr<XNapiTool> pxt = std::make_shared<XNapiTool>(env, info);\\n        ConfigOption *p = (ConfigOption *)pxt->UnWarpInstance();\\n        uint32_t len1=pxt->GetMapLength(pxt->GetArgv(0));\\nfor(uint32_t i1=0;i1<len1;i1++) {\\n    std::string tt1;\\n    std::string tt2;\\n    pxt->SwapJs2CUtf8(pxt->GetMapElementName(pxt->GetArgv(0),i1), tt1);\\n        pxt->SwapJs2CUtf8(pxt->GetMapElementValue(pxt->GetArgv(0),tt1.c_str()), tt2);\\n    p->map1.insert(std::make_pair(tt1, tt2));\\n}\\n        return nullptr;\\n    }\\n\\n};\",\"middleInit\":\"{\\n    std::map<const char *,std::map<const char *,napi_callback>> valueList;\\n    valueList[\\\"disable\\\"][\\\"getvalue\\\"]=napitest::ConfigOption_middle::getvalue_disable;\\n    valueList[\\\"disable\\\"][\\\"setvalue\\\"]=napitest::ConfigOption_middle::setvalue_disable;\\n    valueList[\\\"map1\\\"][\\\"getvalue\\\"]=napitest::ConfigOption_middle::getvalue_map1;\\n    valueList[\\\"map1\\\"][\\\"setvalue\\\"]=napitest::ConfigOption_middle::setvalue_map1;\\n    std::map<const char *, napi_callback> funcList;\\n    pxt->DefineClass(\\\"ConfigOption\\\", napitest::ConfigOption_middle::constructor, valueList ,funcList);\\n}\\n\"}",
        "ParamGenerate": "\"{\\\"optionalParamDestory\\\":\\\"\\\",\\\"valueCheckout\\\":\\\"pxt->SwapJs2CUtf8(pxt->GetArgv(0), vio->in0);\\\\n\\\",\\\"valueDefine\\\":\\\"std::string& v\\\",\\\"valueFill\\\":\\\"vio->in0\\\",\\\"valueIn\\\":\\\"\\\\nstd::string in0;\\\",\\\"valueOut\\\":\\\"\\\",\\\"valuePackage\\\":\\\"\\\"}\"",
        "returnGenerate": "{\"optionalParamDestory\":\"\",\"valueCheckout\":\"\",\"valueDefine\":\"std::string& out\",\"valueFill\":\"vio->out\",\"valueIn\":\"\",\"valueOut\":\"std::string out;\",\"valuePackage\":\"result = pxt->SwapC2JsUtf8(vio->out.c_str());\"}",
        "generateFunctionDirect": "[\"\\nstruct if_direct_value_struct {\\n    std::string in0;\\n    \\n    std::string out;\\n};\\n\\nstatic napi_value if_direct_middle(napi_env env, napi_callback_info info)\\n{\\n    XNapiTool *pxt = std::make_unique<XNapiTool>(env, info).release();\\n    if (pxt->IsFailed()) {\\n        napi_value err = pxt->GetError();\\n        delete pxt;\\n        return err;\\n    }\\n    TestClass1 *pInstance = (TestClass1 *)pxt->UnWarpInstance();\\n\\n    struct if_direct_value_struct *vio = new if_direct_value_struct();\\n    \\n    pxt->SwapJs2CUtf8(pxt->GetArgv(0), vio->in0);\\n\\n    pInstance->if_direct(vio->in0, vio->out);\\n\\n    napi_value result = nullptr;\\n    result = pxt->SwapC2JsUtf8(vio->out.c_str());\\n\\n    delete vio;\\n    if (pxt->IsFailed()) {\\n        result = pxt->GetError();\\n    }\\n    delete pxt; // release\\n    return result;\\n}\",\"\\nbool if_direct(std::string &v1, std::string &out);\",\"\\nbool TestClass1::if_direct(std::string &v1, std::string &out)\\n{\\n    return true;\\n}\\n\"]",
        "generateFunctionAsync": "[\"\\nstruct if_async_value_struct {\\n    std::string in0;\\n    \\n    std::string out;\\n};\\n\\nstatic void if_async_execute(XNapiTool *pxt, void *data)\\n{\\n    if_async_value_struct *vio = (if_async_value_struct *)data;\\n    TestClass1 *pInstance = (TestClass1 *)pxt->GetAsyncInstance();\\n\\n    pInstance->if_async(vio->in0, vio->out);\\n}\\n\\nstatic void if_async_complete(XNapiTool *pxt, void *data)\\n{\\n    if_async_value_struct *vio = (if_async_value_struct *)data;\\n    \\n    napi_value result = nullptr;\\n    result = pxt->SwapC2JsUtf8(vio->out.c_str());\\n    \\n    {\\n        napi_value args[1] = {result};\\n        pxt->FinishAsync(1, args);\\n    }\\n\\n    delete vio;\\n}\\n\\nstatic napi_value if_async_middle(napi_env env, napi_callback_info info)\\n{\\n    XNapiTool *pxt = std::make_unique<XNapiTool>(env, info).release();\\n    if (pxt->IsFailed()) {\\n        napi_value err = pxt->GetError();\\n        delete pxt;\\n        return err;\\n    }\\n    pxt->SetAsyncInstance(pxt->UnWarpInstance());\\n\\n    struct if_async_value_struct *vio = new if_async_value_struct();\\n    \\n    pxt->SwapJs2CUtf8(pxt->GetArgv(0), vio->in0);\\n\\n    \\n    napi_value result = pxt->StartAsync(if_async_execute, vio, if_async_complete, pxt->GetArgc() == 2 ? pxt->GetArgv(1) : nullptr);\\n\\n    if (pxt->IsFailed()) {\\n        result = pxt->GetError();\\n    }\\n    return result;\\n}\",\"\\nbool if_async(std::string &v1, std::string &out);\",\"\\nbool TestClass1::if_async(std::string &v1, std::string &out)\\n{\\n    return true;\\n}\\n\"]",
        "connectResult": "[\"\\n    static napi_value getvalue_disable(napi_env env, napi_callback_info info)\\n    {\\n        XNapiTool *pxt = std::make_unique<XNapiTool>(env, info).release();\\n        ConfigOption *p = (ConfigOption *)pxt->UnWarpInstance();\\n        napi_value result;\\n        result = pxt->SwapC2JsBool(p->disable);\\n        delete pxt;\\n        return result;\\n    }\\n    static napi_value setvalue_disable(napi_env env, napi_callback_info info)\\n    {\\n        std::shared_ptr<XNapiTool> pxt = std::make_shared<XNapiTool>(env, info);\\n        ConfigOption *p = (ConfigOption *)pxt->UnWarpInstance();\\n        BOOLEAN_JS_2_C(pxt->GetArgv(0),bool,p->disable);\\n        return nullptr;\\n    }\\n\\n    static napi_value getvalue_map1(napi_env env, napi_callback_info info)\\n    {\\n        XNapiTool *pxt = std::make_unique<XNapiTool>(env, info).release();\\n        ConfigOption *p = (ConfigOption *)pxt->UnWarpInstance();\\n        napi_value result;\\n        result = nullptr;\\n    for (auto i = p->map1.begin(); i != p->map1.end(); i++)\\n        {\\n            const char * tnv1;\\n            napi_value tnv2 = nullptr;\\n            tnv1 = (i -> first).c_str();\\n        tnv2 = pxt->SwapC2JsUtf8(i->second.c_str());\\n            pxt->SetMapElement(result, tnv1, tnv2);\\n        }\\n        delete pxt;\\n        return result;\\n    }\\n    static napi_value setvalue_map1(napi_env env, napi_callback_info info)\\n    {\\n        std::shared_ptr<XNapiTool> pxt = std::make_shared<XNapiTool>(env, info);\\n        ConfigOption *p = (ConfigOption *)pxt->UnWarpInstance();\\n        uint32_t len2=pxt->GetMapLength(pxt->GetArgv(0));\\nfor(uint32_t i2=0;i2<len2;i2++) {\\n    std::string tt2;\\n    std::string tt3;\\n    pxt->SwapJs2CUtf8(pxt->GetMapElementName(pxt->GetArgv(0),i2), tt2);\\n        pxt->SwapJs2CUtf8(pxt->GetMapElementValue(pxt->GetArgv(0),tt2.c_str()), tt3);\\n    p->map1.insert(std::make_pair(tt2, tt3));\\n}\\n        return nullptr;\\n    }\\n\",\"\\n    bool disable;\\n    std::map<std::string,std::string> map1;\",\"\",\"{\\n    std::map<const char *,std::map<const char *,napi_callback>> valueList;\\n    valueList[\\\"disable\\\"][\\\"getvalue\\\"]=napitest::ConfigOption_middle::getvalue_disable;\\n    valueList[\\\"disable\\\"][\\\"setvalue\\\"]=napitest::ConfigOption_middle::setvalue_disable;\\n    valueList[\\\"map1\\\"][\\\"getvalue\\\"]=napitest::ConfigOption_middle::getvalue_map1;\\n    valueList[\\\"map1\\\"][\\\"setvalue\\\"]=napitest::ConfigOption_middle::setvalue_map1;\\n    std::map<const char *, napi_callback> funcList;\"]",
        "getNamespaceResult": "{\"class\":[],\"const\":[],\"enum\":[{\"name\":\"TestClass\",\"body\":{\"element\":[{\"name\":\"name\",\"value\":\"\",\"type\":\"string\"}],\"function\":[],\"enumValueType\":0}}],\"export\":[],\"function\":[{\"name\":\"fun1\",\"type\":1,\"value\":[{\"name\":\"v\",\"type\":\"Array<string>\"}],\"ret\":\"string\"}],\"interface\":[{\"name\":\"TestClass1\",\"body\":{\"function\":[],\"value\":[{\"name\":\"age\",\"type\":\"NUMBER_TYPE_1\"}]}}],\"namespace\":[],\"middleFunc\":null,\"implH\":null,\"implCpp\":null,\"middleInit\":null}",
        "generateEnumResult": "{\"implH\":\"\\nenum GrantStatus {\\nPERMISSION_DEFAULT = 0,\\nPERMISSION_DENIED = -1,\\nPERMISSION_GRANTED = 2,\\nPERMISSION_PASS = 3,\\n};\\n\",\"implCpp\":\"\"}",
        "generateFunction": "[\"\\nstruct fun1_value_struct {\\nuint32_t outErrCode = 0;\\nstd::string out;\\n};\\n\\nvoid fun1_execute(XNapiTool *pxt, void *data)\\n{\\nfun1_value_struct *vio = (fun1_value_struct *)data;\\n\\n\\nfun1(vio->outErrCode, vio->out);\\n}\\n\\nvoid fun1_complete(XNapiTool *pxt, void *data)\\n{\\nfun1_value_struct *vio = (fun1_value_struct *)data;\\n\\nnapi_value result = nullptr;\\n\\nresult = pxt->SwapC2JsUtf8(vio->out.c_str());\\n\\nnapi_value errCodeResult = nullptr;\\nnapi_value napiErrCode = nullptr;\\nnapiErrCode = NUMBER_C_2_JS(pxt, vio->outErrCode);\\npxt->SetValueProperty(errCodeResult, \\\"code\\\", napiErrCode);\\n{\\nnapi_value args[2] = {errCodeResult, result};\\npxt->FinishAsync(2, args);\\n}\\n\\n\\ndelete vio;\\n}\\n\\nnapi_value fun1_middle(napi_env env, napi_callback_info info)\\n{\\nXNapiTool *pxt = std::make_unique<XNapiTool>(env, info).release();\\nif (pxt->IsFailed()) {\\nnapi_value err = pxt->GetError();\\ndelete pxt;\\nreturn err;\\n}\\n\\n\\nstruct fun1_value_struct *vio = new fun1_value_struct();\\n\\n\\n\\n\\n\\n\\nnapi_value result = pxt->StartAsync(fun1_execute, vio, fun1_complete, pxt->GetArgc() == 1 ? pxt->GetArgv(0) : nullptr);\\n\\nif (pxt->IsFailed()) {\\nresult = pxt->GetError();\\n}\\nreturn result;\\n}\",\"\\nbool fun1(uint32_t& outErrCode, std::string& out);\",\"\\nbool fun1(uint32_t& outErrCode, std::string& out)\\n{\\nreturn true;\\n}\\n\"]",
        "paramGenerateArray": "{\"valueCheckout\":\"uint32_t len=pxt->GetArrayLength(pxt->GetArgv(0));\\nfor(uint32_t i=0;i<len;i++) {\\nstd::string tt;\\npxt->SwapJs2CUtf8(pxt->GetArrayElement(pxt->GetArgv(0),i), tt);\\nvio->in0.push_back(tt);\\n\\n}\\n\",\"valueDefine\":\"std::vector<std::string> &v\",\"valueFill\":\"vio->in0\",\"valueIn\":\"\\nstd::vector<std::string> in0;\",\"valueOut\":\"\",\"valuePackage\":\"\"}",
        "paramGenerateMap": "{\"optionalParamDestory\":\"\",\"valueCheckout\":\"uint32_t len=pxt->GetMapLength(pxt->GetArgv(0));\\nfor(uint32_t i=0;i<len;i++) {\\nstd::string tt;\\nstd::string tt1;\\npxt->SwapJs2CUtf8(pxt->GetMapElementName(pxt->GetArgv(0),i), tt);\\npxt->SwapJs2CUtf8(pxt->GetMapElementValue(pxt->GetArgv(0),tt.c_str()), tt1);\\nvio->in0.insert(std::make_pair(tt, tt1));\\n}\\n\",\"valueDefine\":\"std::map<std::string,std::string>& v\",\"valueFill\":\"vio->in0\",\"valueIn\":\"\\nstd::map<std::string,std::string> in0;\",\"valueOut\":\"\",\"valuePackage\":\"\"}",
        "mapTempleteFunc": "\"uint32_t len=pxt->GetMapLength(pxt->GetArgv(0));\\nfor(uint32_t i=0;i<len;i++) {\\nstd::string kk1;\\nstd::string kk2;\\npxt->SwapJs2CUtf8(pxt->GetMapElementName(pxt->GetArgv(0),i), kk1);\\npxt->SwapJs2CUtf8(pxt->GetMapElementValue(pxt->GetArgv(0),kk1.c_str()), kk2);\\nvio->in0.insert(std::make_pair(kk1, kk2));\\n}\"",
        "generateNamespace": "{\"implH\":\"namespacenapitest{\\nenumTestEnum{\\nname=0,\\n};\\n\\nclassTestInterface{\\npublic:\\nNUMBER_TYPE_1age;\\n};\\nboolfun1(std::vector<std::string>&v,std::string&out);\\n}\",\"implCpp\":\"namespacenapitest{\\nboolfun1(std::vector<std::string>&v,std::string&out)\\n{\\nreturntrue;\\n}\\n}\",\"middleBody\":\"namespacenapitest{\\nclassTestInterface_middle{\\npublic:\\nstaticnapi_valueconstructor(napi_envenv,napi_callback_infoinfo)\\n{\\nXNapiTool*pxt=newXNapiTool(env,info);\\n\\nTestInterface*p=newTestInterface();\\n\\nnapi_valuethisvar=pxt->WrapInstance(p,release);\\n\\nreturnthisvar;\\n}\\nstaticvoidrelease(void*p)\\n{\\nTestInterface*p2=(TestInterface*)p;\\ndeletep2;\\n}\\n\\nstaticnapi_valuegetvalue_age(napi_envenv,napi_callback_infoinfo)\\n{\\nXNapiTool*pxt=std::make_unique<XNapiTool>(env,info).release();\\nTestInterface*p=(TestInterface*)pxt->UnWarpInstance();\\nnapi_valueresult;\\nresult=NUMBER_C_2_JS(pxt,p->age);\\ndeletepxt;\\nreturnresult;\\n}\\nstaticnapi_valuesetvalue_age(napi_envenv,napi_callback_infoinfo)\\n{\\nstd::shared_ptr<XNapiTool>pxt=std::make_shared<XNapiTool>(env,info);\\nTestInterface*p=(TestInterface*)pxt->UnWarpInstance();\\nNUMBER_JS_2_C(pxt->GetArgv(0),NUMBER_TYPE_1,p->age);\\nreturnnullptr;\\n}\\n\\n};\\nstructfun1_value_struct{\\nstd::vector<std::string>in0;\\n\\nstd::stringout;\\n};\\n\\nnapi_valuefun1_middle(napi_envenv,napi_callback_infoinfo)\\n{\\nXNapiTool*pxt=std::make_unique<XNapiTool>(env,info).release();\\nif(pxt->IsFailed()){\\nnapi_valueerr=pxt->GetError();\\ndeletepxt;\\nreturnerr;\\n}\\n\\n\\nstructfun1_value_struct*vio=newfun1_value_struct();\\n\\nuint32_tlen7=pxt->GetArrayLength(pxt->GetArgv(0));\\nfor(uint32_ti7=0;i7<len7;i7++){\\nstd::stringtt7;\\npxt->SwapJs2CUtf8(pxt->GetArrayElement(pxt->GetArgv(0),i7),tt7);\\nvio->in0.push_back(tt7);\\n\\n}\\n\\n\\nfun1(vio->in0,vio->out);\\n\\nnapi_valueresult=nullptr;\\nresult=pxt->SwapC2JsUtf8(vio->out.c_str());\\n\\n\\n\\ndeletevio;\\nif(pxt->IsFailed()){\\nresult=pxt->GetError();\\n}\\n\\ndeletepxt;//release\\nreturnresult;\\n}}\",\"middleInit\":\"{\\nstd::map<constchar*,std::map<constchar*,napi_callback>>valueList;\\nvalueList[\\\"age\\\"][\\\"getvalue\\\"]=napitest::TestInterface_middle::getvalue_age;\\nvalueList[\\\"age\\\"][\\\"setvalue\\\"]=napitest::TestInterface_middle::setvalue_age;\\nstd::map<constchar*,napi_callback>funcList;\\npxt->DefineClass(\\\"TestInterface\\\",napitest::TestInterface_middle::constructor,valueList,funcList);\\n}\\npxt->DefineFunction(\\\"fun1\\\",napitest::fun1_middle);\\n\"}",
        "ParamGenerate1": "\"{\\\"optionalParamDestory\\\":\\\"\\\",\\\"valueCheckout\\\":\\\"NUMBER_JS_2_C(pxt->GetArgv(0),NUMBER_TYPE_1,vio->in0);\\\\n\\\",\\\"valueDefine\\\":\\\"NUMBER_TYPE_1& v\\\",\\\"valueFill\\\":\\\"vio->in0\\\",\\\"valueIn\\\":\\\"\\\\nNUMBER_TYPE_1 in0;\\\",\\\"valueOut\\\":\\\"\\\",\\\"valuePackage\\\":\\\"\\\"}\"",
        "ParamGenerate2": "\"{\\\"optionalParamDestory\\\":\\\"\\\",\\\"valueCheckout\\\":\\\"BOOLEAN_JS_2_C(pxt->GetArgv(0),bool,vio->in0);\\\\n\\\",\\\"valueDefine\\\":\\\"bool& v\\\",\\\"valueFill\\\":\\\"vio->in0\\\",\\\"valueIn\\\":\\\"\\\\nbool in0;\\\",\\\"valueOut\\\":\\\"\\\",\\\"valuePackage\\\":\\\"\\\"}\"",
        "ParamGenerate3": "\"{\\\"optionalParamDestory\\\":\\\"\\\",\\\"valueCheckout\\\":\\\"uint32_t len=pxt->GetArrayLength(pxt->GetArgv(0));\\\\nfor(uint32_t i=0;i<len;i++) {\\\\nstd::string tt;\\\\npxt->SwapJs2CUtf8(pxt->GetArrayElement(pxt->GetArgv(0),i), tt);\\\\nvio->in0.push_back(tt);\\\\n\\\\n}\\\\n\\\",\\\"valueDefine\\\":\\\"std::vector<std::string> &v\\\",\\\"valueFill\\\":\\\"vio->in0\\\",\\\"valueIn\\\":\\\"\\\\nstd::vector<std::string> in0;\\\",\\\"valueOut\\\":\\\"\\\",\\\"valuePackage\\\":\\\"\\\"}\"",
        "ParamGenerate4": "\"{\\\"optionalParamDestory\\\":\\\"\\\",\\\"valueCheckout\\\":\\\"uint32_t len=pxt->GetArrayLength(pxt->GetArgv(0));\\\\nfor(uint32_t i=0;i<len;i++) {\\\\nbool tt;\\\\ntt = pxt->SwapJs2CBool(pxt->GetArrayElement(pxt->GetArgv(0),i));\\\\nvio->in0.push_back(tt);\\\\n\\\\n}\\\\n\\\",\\\"valueDefine\\\":\\\"std::vector<bool> &v\\\",\\\"valueFill\\\":\\\"vio->in0\\\",\\\"valueIn\\\":\\\"\\\\nstd::vector<bool> in0;\\\",\\\"valueOut\\\":\\\"\\\",\\\"valuePackage\\\":\\\"\\\"}\"",
        "ParamGenerate5": "\"{\\\"optionalParamDestory\\\":\\\"\\\",\\\"valueCheckout\\\":\\\"uint32_t len=pxt->GetArrayLength(pxt->GetArgv(0));\\\\nfor(uint32_t i=0;i<len;i++) {\\\\nnumber tt;\\\\n[replace_swap]\\\\nvio->in0.push_back(tt);\\\\n\\\\n}\\\\n\\\",\\\"valueDefine\\\":\\\"std::vector<number> &v\\\",\\\"valueFill\\\":\\\"vio->in0\\\",\\\"valueIn\\\":\\\"\\\\nstd::vector<number> in0;\\\",\\\"valueOut\\\":\\\"\\\",\\\"valuePackage\\\":\\\"\\\"}\"",
        "ParamGenerate6": "\"{\\\"optionalParamDestory\\\":\\\"\\\",\\\"valueCheckout\\\":\\\"uint32_t len=pxt->GetArrayLength(pxt->GetArgv(0));\\\\nfor(uint32_t i=0;i<len;i++) {\\\\nstd::string tt;\\\\npxt->SwapJs2CUtf8(pxt->GetArrayElement(pxt->GetArgv(0),i), tt);\\\\nvio->in0.push_back(tt);\\\\n\\\\n}\\\\n\\\",\\\"valueDefine\\\":\\\"std::vector<std::string> &v\\\",\\\"valueFill\\\":\\\"vio->in0\\\",\\\"valueIn\\\":\\\"\\\\nstd::vector<std::string> in0;\\\",\\\"valueOut\\\":\\\"\\\",\\\"valuePackage\\\":\\\"\\\"}\"",
        "ParamGenerate7": "\"{\\\"optionalParamDestory\\\":\\\"\\\",\\\"valueCheckout\\\":\\\"uint32_t len=pxt->GetArrayLength(pxt->GetArgv(0));\\\\nfor(uint32_t i=0;i<len;i++) {\\\\nbool tt;\\\\ntt = pxt->SwapJs2CBool(pxt->GetArrayElement(pxt->GetArgv(0),i));\\\\nvio->in0.push_back(tt);\\\\n\\\\n}\\\\n\\\",\\\"valueDefine\\\":\\\"std::vector<bool> &v\\\",\\\"valueFill\\\":\\\"vio->in0\\\",\\\"valueIn\\\":\\\"\\\\nstd::vector<bool> in0;\\\",\\\"valueOut\\\":\\\"\\\",\\\"valuePackage\\\":\\\"\\\"}\"",
        "ParamGenerate8": "\"{\\\"optionalParamDestory\\\":\\\"\\\",\\\"valueCheckout\\\":\\\"uint32_t len=pxt->GetArrayLength(pxt->GetArgv(0));\\\\nfor(uint32_t i=0;i<len;i++) {\\\\nnumber tt;\\\\n[replace_swap]\\\\nvio->in0.push_back(tt);\\\\n\\\\n}\\\\n\\\",\\\"valueDefine\\\":\\\"std::vector<number> &v\\\",\\\"valueFill\\\":\\\"vio->in0\\\",\\\"valueIn\\\":\\\"\\\\nstd::vector<number> in0;\\\",\\\"valueOut\\\":\\\"\\\",\\\"valuePackage\\\":\\\"\\\"}\"",
        "returnGenerate1": "{\"optionalParamDestory\":\"\",\"valueCheckout\":\"\",\"valueDefine\":\"NUMBER_TYPE_1& out\",\"valueFill\":\"vio->out\",\"valueIn\":\"\",\"valueOut\":\"NUMBER_TYPE_1 out;\",\"valuePackage\":\"result = NUMBER_C_2_JS(pxt, vio->out);\"}",
        "returnGenerate2": "{\"optionalParamDestory\":\"\",\"valueCheckout\":\"\",\"valueDefine\":\"bool& out\",\"valueFill\":\"vio->out\",\"valueIn\":\"\",\"valueOut\":\"bool out;\",\"valuePackage\":\"result = pxt->SwapC2JsBool(vio->out);\"}",
        "returnGenerate3": "{\"optionalParamDestory\":\"\",\"valueCheckout\":\"\",\"valueDefine\":\"std::vector<std::string>& out\",\"valueFill\":\"vio->out\",\"valueIn\":\"\",\"valueOut\":\"std::vector<std::string> out;\",\"valuePackage\":\"uint32_t len=vio->out.size();\\nfor(uint32_t i=0;i<len;i++) {\\nnapi_value tnv = nullptr;\\ntnv = pxt->SwapC2JsUtf8(vio->out[i].c_str());\\npxt->SetArrayElement(result, i, tnv);\\n}\"}",
        "returnGenerate4": "{\"optionalParamDestory\":\"\",\"valueCheckout\":\"\",\"valueDefine\":\"std::vector<NUMBER_TYPE_1>& out\",\"valueFill\":\"vio->out\",\"valueIn\":\"\",\"valueOut\":\"std::vector<NUMBER_TYPE_1> out;\",\"valuePackage\":\"uint32_t len=vio->out.size();\\nfor(uint32_t i=0;i<len;i++) {\\nnapi_value tnv = nullptr;\\ntnv = NUMBER_C_2_JS(pxt,vio->out[i]);\\npxt->SetArrayElement(result, i, tnv);\\n}\"}",
        "returnGenerate5": "{\"optionalParamDestory\":\"\",\"valueCheckout\":\"\",\"valueDefine\":\"std::vector<boolean>& out\",\"valueFill\":\"vio->out\",\"valueIn\":\"\",\"valueOut\":\"std::vector<boolean> out;\",\"valuePackage\":\"\"}",
        "returnGenerate6": "{\"optionalParamDestory\":\"\",\"valueCheckout\":\"\",\"valueDefine\":\"std::vector<std::string>& out\",\"valueFill\":\"vio->out\",\"valueIn\":\"\",\"valueOut\":\"std::vector<std::string> out;\",\"valuePackage\":\"uint32_t len=vio->out.size();\\nfor(uint32_t i=0;i<len;i++) {\\nnapi_value tnv = nullptr;\\ntnv = pxt->SwapC2JsUtf8(vio->out[i].c_str());\\npxt->SetArrayElement(result, i, tnv);\\n}\"}",
        "returnGenerate7": "{\"optionalParamDestory\":\"\",\"valueCheckout\":\"\",\"valueDefine\":\"std::vector<boolean>& out\",\"valueFill\":\"vio->out\",\"valueIn\":\"\",\"valueOut\":\"std::vector<boolean> out;\",\"valuePackage\":\"\"}",
        "returnGenerate8": "{\"optionalParamDestory\":\"\",\"valueCheckout\":\"\",\"valueDefine\":\"NUMBER_TYPE_1[]& out\",\"valueFill\":\"vio->out\",\"valueIn\":\"\",\"valueOut\":\"NUMBER_TYPE_1[] out;\",\"valuePackage\":\"result = NUMBER_C_2_JS(pxt, vio->out);\"}"
    },
    "Generate1": {
        "ParamGenerate": "{\"valueIn\":\"\\n    NUMBER_TYPE_1 in0;\",\"valueOut\":\"\",\"valueCheckout\":\"NUMBER_JS_2_C(pxt->GetArgv(0),NUMBER_TYPE_1,vio->in0);\",\"valueFill\":\"vio->in0\",\"valuePackage\":\"\",\"valueDefine\":\"NUMBER_TYPE_1 &a\"}",
        "returnGenerate": "{\"valueIn\":\"\",\"valueOut\":\"NUMBER_TYPE_1 out;\",\"valueCheckout\":\"\",\"valueFill\":\"vio->out\",\"valuePackage\":\"napi_value result = nullptr;\\n    result = NUMBER_C_2_JS(pxt, vio->out);\",\"valueDefine\":\"NUMBER_TYPE_1 &out\"}",
        "ParamGenerateBoolean": "{\"valueIn\":\"\\n    bool in0;\",\"valueOut\":\"\",\"valueCheckout\":\"BOOLEAN_JS_2_C(pxt->GetArgv(0),bool,vio->in0);\",\"valueFill\":\"vio->in0\",\"valuePackage\":\"\",\"valueDefine\":\"bool &a\"}",
        "returnGenerateBool": "{\"valueIn\":\"\",\"valueOut\":\"bool out;\",\"valueCheckout\":\"\",\"valueFill\":\"vio->out\",\"valuePackage\":\"napi_value result = nullptr;\\n    result = pxt->SwapC2JsBool(vio->out);\",\"valueDefine\":\"bool &out\"}"
    },
    "Generate2": {
        "returnGenerate": "{\"valueIn\":\"\",\"valueOut\":\"std::vector<std::string> out;\",\"valueCheckout\":\"\",\"valueFill\":\"vio->out\",\"valuePackage\":\"napi_value result = nullptr;\\n    uint32_t len1=vio->out.size();\\n    for(uint32_t i=0;i<len1;i++) {\\n        napi_value tnv1 = nullptr;\\n        tnv1 = pxt->SwapC2JsUtf8(vio->out[i].c_str());\\n        pxt->SetArrayElement(result, i, tnv1);\\n    }\",\"valueDefine\":\"std::vector<std::string> &out\"}",
        "ParamGenerate": "{\"valueIn\":\"\\n    std::vector<std::string> in0;\",\"valueOut\":\"\",\"valueCheckout\":\"    uint32_t len11=pxt->GetArrayLength(pxt->GetArgv(0));\\n    for(uint32_t i11=0;i11<len11;i11++) {\\n        std::string tt11;\\n        pxt->SwapJs2CUtf8(pxt->GetArrayElement(pxt->GetArgv(0),i11), tt11);\\n        vio->in0.push_back(tt11);\\n\\n    }\",\"valueFill\":\"vio->in0\",\"valuePackage\":\"\",\"valueDefine\":\"std::vector<std::string> &a\"}",
        "returnGenerateNum": "{\"valueIn\":\"\",\"valueOut\":\"std::vector<number> out;\",\"valueCheckout\":\"\",\"valueFill\":\"vio->out\",\"valuePackage\":\"napi_value result = nullptr;\\n    \",\"valueDefine\":\"std::vector<number> &out\"}"
    },
    "Generate3": {
        "returnGenerate": "{\"valueIn\":\"\",\"valueOut\":\"std::vector<boolean> out;\",\"valueCheckout\":\"\",\"valueFill\":\"vio->out\",\"valuePackage\":\"napi_value result = nullptr;\\n    \",\"valueDefine\":\"std::vector<boolean> &out\"}",
        "ParamGenerate": "{\"valueIn\":\"\\n    std::vector<bool> in0;\",\"valueOut\":\"\",\"valueCheckout\":\"    uint32_t len12=pxt->GetArrayLength(pxt->GetArgv(0));\\n    for(uint32_t i12=0;i12<len12;i12++) {\\n        bool tt12;\\n        pxt->SwapJs2CBool(pxt->GetArrayElement(pxt->GetArgv(0),i12));\\n        vio->in0.push_back(tt12);\\n\\n    }\",\"valueFill\":\"vio->in0\",\"valuePackage\":\"\",\"valueDefine\":\"std::vector<bool> &a\"}",
        "ParamGenerateNum": "{\"valueIn\":\"\\n    std::vector<number> in0;\",\"valueOut\":\"\",\"valueCheckout\":\"    uint32_t len13=pxt->GetArrayLength(pxt->GetArgv(0));\\n    for(uint32_t i13=0;i13<len13;i13++) {\\n        number tt13;\\n        [replace_swap]\\n        vio->in0.push_back(tt13);\\n\\n    }\",\"valueFill\":\"vio->in0\",\"valuePackage\":\"\",\"valueDefine\":\"std::vector<number> &a\"}"
    },
    "retJson2": {
        "ParamGenerate": "{\"valueIn\":\"\\n    std::vector<std::string> in0;\",\"valueOut\":\"\",\"valueCheckout\":\"    uint32_t len16=pxt->GetArrayLength(pxt->GetArgv(0));\\n    for(uint32_t i16=0;i16<len16;i16++) {\\n        std::string tt16;\\n        pxt->SwapJs2CUtf8(pxt->GetArrayElement(pxt->GetArgv(0),i16), tt16);\\n        vio->in0.push_back(tt16);\\n    }\",\"valueFill\":\"vio->in0\",\"valuePackage\":\"\",\"valueDefine\":\"std::vector<std::string> &a\"}"
    },
    "Generate4": {
        "ParamGenerate": "{\"valueIn\":\"\\n    std::vector<std::string> in0;\",\"valueOut\":\"\",\"valueCheckout\":\"    uint32_t len14=pxt->GetArrayLength(pxt->GetArgv(0));\\n    for(uint32_t i14=0;i14<len14;i14++) {\\n        std::string tt14;\\n        pxt->SwapJs2CUtf8(pxt->GetArrayElement(pxt->GetArgv(0),i14), tt14);\\n        vio->in0.push_back(tt14);\\n\\n    }\",\"valueFill\":\"vio->in0\",\"valuePackage\":\"\",\"valueDefine\":\"std::vector<std::string> &a\"}",
        "returnGenerate": "{\"valueIn\":\"\",\"valueOut\":\"std::vector<std::string> out;\",\"valueCheckout\":\"\",\"valueFill\":\"vio->out\",\"valuePackage\":\"napi_value result = nullptr;\\n    uint32_t len1=vio->out.size();\\n    for(uint32_t i=0;i<len1;i++) {\\n        napi_value tnv1 = nullptr;\\n        tnv1 = pxt->SwapC2JsUtf8(vio->out[i].c_str());\\n        pxt->SetArrayElement(result, i, tnv1);\\n    }\",\"valueDefine\":\"std::vector<std::string> &out\"}"
    },
    "Generate5": {
        "ParamGenerate": "{\"valueIn\":\"\\n    std::vector<bool> in0;\",\"valueOut\":\"\",\"valueCheckout\":\"    uint32_t len15=pxt->GetArrayLength(pxt->GetArgv(0));\\n    for(uint32_t i15=0;i15<len15;i15++) {\\n        bool tt15;\\n        pxt->SwapJs2CBool(pxt->GetArrayElement(pxt->GetArgv(0),i15));\\n        vio->in0.push_back(tt15);\\n\\n    }\",\"valueFill\":\"vio->in0\",\"valuePackage\":\"\",\"valueDefine\":\"std::vector<bool> &a\"}",
        "returnGenerate": "{\"valueIn\":\"\",\"valueOut\":\"std::vector<boolean> out;\",\"valueCheckout\":\"\",\"valueFill\":\"vio->out\",\"valuePackage\":\"napi_value result = nullptr;\\n    \",\"valueDefine\":\"std::vector<boolean> &out\"}",
        "ParamGenerateNum": "{\"valueIn\":\"\\n    std::vector<number> in0;\",\"valueOut\":\"\",\"valueCheckout\":\"    uint32_t len16=pxt->GetArrayLength(pxt->GetArgv(0));\\n    for(uint32_t i16=0;i16<len16;i16++) {\\n        number tt16;\\n        [replace_swap]\\n        vio->in0.push_back(tt16);\\n\\n    }\",\"valueFill\":\"vio->in0\",\"valuePackage\":\"\",\"valueDefine\":\"std::vector<number> &a\"}"
    },
    "Generate6": {
        "ParamGenerate": "{\"valueIn\":\"\",\"valueOut\":\"\",\"valueCheckout\":\"\",\"valueFill\":\"\",\"valuePackage\":\"\",\"valueDefine\":\"\"}",
        "returnGenerate": "{\"valueIn\":\"\",\"valueOut\":\"std::vector<number> out;\",\"valueCheckout\":\"\",\"valueFill\":\"vio->out\",\"valuePackage\":\"napi_value result = nullptr;\\n    \",\"valueDefine\":\"std::vector<number> &out\"}"
    },
    "Generate7": {
        "ParamGenerate": "{\"valueIn\":\"\",\"valueOut\":\"\",\"valueCheckout\":\"\",\"valueFill\":\"\",\"valuePackage\":\"\",\"valueDefine\":\"\"}",
        "returnGenerate": "{\"valueIn\":\"\",\"valueOut\":\"\",\"valueCheckout\":\"\",\"valueFill\":\"vio->out\",\"valuePackage\":\"napi_value result = nullptr;\\n    undefined\",\"valueDefine\":\"\"}"
    },
    "Generate8": {
        "returnGenerate": "{\"valueIn\":\"\",\"valueOut\":\"\",\"valueCheckout\":\"\",\"valueFill\":\"vio->out\",\"valuePackage\":\"napi_value result = nullptr;\\n    undefined\",\"valueDefine\":\"\"}"
    },
    "ParamIn": {
        "removeExplains": "/*\n* Copyright \n*/\ndeclare namespace napitest {\n    //test remove explain\n    function fun1(v1: string):void;\n}\n\nexport default napitest;\n",
        "analyzeSubInterface": "\nnum1: number;\nstr1: string;\nnums: Array<number>;\nstrs: Array<string>;\nif_direct(v1: string, v2: boolean): string;\nif_callback(v1: string, cb: Callback<string>): string;\nif_async(v1: string, cb: AsyncCallback<string>): string;\n",
        "parseEnum": "export enum GrantStatus {\nPERMISSION_DEFAULT = \"\",\nPERMISSION_DENIED = \"-1\",\nPERMISSION_GRANTED = \"2\",\nPERMISSION_PASS = \"3\",\n}\n",
        "parseInterface": "interface ConfigOption {\ndisable: boolean;\nmaxStorage: string;\n}\nfunction fun1(v: ConfigOption): void\n",
        "analyzeInterface": "num1: number;str1: string;nums: Array<number>;strs: Array<string>;if_direct(v1: string, v2: boolean): string;if_callback(v1: string, cb: Callback<string>): string;if_async(v1: string, cb: AsyncCallback<string>): string;",
        "analyzeNamespace": "\nnamespace Space3 {\nconst MAX_KEY_LENGTH : string;\nexport enum Entity {\nENTITY_DEFAULT = \"entity.system.default\",\n}\nclass TestClass {\nstatic $fun1(v: Entity): boolean;\n}\ninterface TestClass2 {\nanimal: string;\nfix(v1: string): string;\n}\nfunction fun2(v3: string): string;\nnamespace Space4 {\nfunction fun3(): void;\n}\n}\n",
        "getLicense": "/*\n* Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd. \n*/\ndeclare namespace napitest {\n    function fun1(v1: { [key: string]: Array<string> }):void;\n}\n\nexport default napitest;\n",
        "checkOutBody": "declare namespace napitest {function fun1(v1: { [key: string]: Array<string> }):void;}export default napitest;",
        "removeEmptyLine": "declare namespace napitest {\n    \n    function fun1(v1: string):void;\n    \n}\n\nexport default napitest;\n",
        "parseNamespace": "namespace Space3 {\nfunction fun3(v3: string): string;\ninterface TestClass2 {\nhaha: number;\n}\n}\n"
    }
}