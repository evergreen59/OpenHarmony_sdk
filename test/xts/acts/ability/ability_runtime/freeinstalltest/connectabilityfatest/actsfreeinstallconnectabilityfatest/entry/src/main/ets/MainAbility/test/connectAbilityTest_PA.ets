// @ts-nocheck
/**
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from "@ohos/hypium"
import featureAbility from '@ohos.ability.featureAbility';
import AbilityDelegatorRegistry from '@ohos.application.abilityDelegatorRegistry'
import commonEvent from '@ohos.commonEvent';

export default function connectAbilityTest_PA() {
  var TAG = "";
  var dataAssert = "";
  var abilityDelegator = undefined
  var subscriber;
  var subscribeInfo = {
    events: ["service_event", "service2_event", "service3_event", "service4_event", "service5_event",
      "service6_event", "service7_event", "service8_event", "service9_event", "service10_event", "service11_event"]
  };

  function sleep(time) {
    return new Promise((resolve) => setTimeout(resolve, time))
  }

  async function startService(msg, str) {
    console.info(msg + ' startService successful. str: ' + JSON.stringify(str));
    featureAbility.startAbility(str)
      .then((data) => {
        console.info(msg + ' startService successful. Data: ' + JSON.stringify(data));
      }).catch((error) => {
        console.error(msg + ' startService  failed. Cause: ' + JSON.stringify(error));
      })
  }

  function checkParameters(msg1, data) {
    for (var key in data.parameters) {
      console.info(msg1 + " data.parameters is : " + data.parameters[key])
      if (data.parameters[key] === "onFailed") {
        dataAssert = "onFailed";
      } else if (data.parameters[key] === "onDisconnect") {
        dataAssert = "onDisconnect";
      } else if (data.parameters[key] === "onConnect") {
        dataAssert = "onConnect";
      }
    }
  }

  function SubscribeCallBack(err, data) {
    if (err.code) {
      console.error("commonEvent subscribe failed " + JSON.stringify(err));
    } else {
      if (data.event === "service_event") {
        console.info("commonEvent subscribe service " + JSON.stringify(data));
        checkParameters("commonEvent service", data)
      } else if (data.event === "service2_event") {
        console.info("commonEvent subscribe service2 " + JSON.stringify(data));
        checkParameters("commonEvent service2", data)
      } else if (data.event === "service3_event") {
        console.info("commonEvent subscribe service3 " + JSON.stringify(data));
        checkParameters("commonEvent service3", data)
      } else if (data.event === "service4_event") {
        console.info("commonEvent subscribe service4 " + JSON.stringify(data));
        checkParameters("commonEvent service4", data)
      } else if (data.event === "service5_event") {
        console.info("commonEvent subscribe service5 " + JSON.stringify(data));
        checkParameters("commonEvent service5", data)
      } else if (data.event === "service6_event") {
        console.info("commonEvent subscribe service6 " + JSON.stringify(data));
        checkParameters("commonEvent service6", data)
      } else if (data.event === "service7_event") {
        console.info("commonEvent subscribe service7 " + JSON.stringify(data));
        checkParameters("commonEvent service7", data)
      } else if (data.event === "service8_event") {
        console.info("commonEvent subscribe service8 " + JSON.stringify(data));
        checkParameters("commonEvent service8", data)
      } else if (data.event === "service9_event") {
        console.info("commonEvent subscribe service9 " + JSON.stringify(data));
        checkParameters("commonEvent service9", data)
      } else if (data.event === "service10_event") {
        console.info("commonEvent subscribe service10 " + JSON.stringify(data));
        checkParameters("commonEvent service10", data)
      } else if (data.event === "service11_event") {
        console.info("commonEvent subscribe service11 " + JSON.stringify(data));
        checkParameters("commonEvent service11", data)
      }
    }
  }


  function CreateSubscriberCallBack(err, commonEventSubscriber) {
    if (err.code) {
      console.error("commonEvent createSubscriber failed " + JSON.stringify(err));
    } else {
      console.info("----commonEvent createSubscriber------");
      subscriber = commonEventSubscriber;
      commonEvent.subscribe(subscriber, SubscribeCallBack);
    }
  }

  describe('FreeInstall_FA_ConnectAbility_PA', function () {
    beforeAll(async function (done) {
      console.info("FreeInstall_FA_ConnectAbility_PA before all called");
      console.info("FreeInstall_FA_ConnectAbility_PA commonEvent.createSubscriber start!!!");
      commonEvent.createSubscriber(subscribeInfo, CreateSubscriberCallBack);
      await sleep(2000);
      abilityDelegator = AbilityDelegatorRegistry.getAbilityDelegator()
      var cmd = "bm install -p data/test/MockService.hap";
      console.info("cmd : " + cmd)
      abilityDelegator.executeShellCommand(cmd, (err: any, d: any) => {
        console.info("executeShellCommand : err : " + JSON.stringify(err), " data : " + JSON.stringify(d));
      })
      await sleep(500);
      var cmd1 = "mkdir -p /data/app/el2/100/base/com.ohos.hag.famanager/haps/entry";
      abilityDelegator.executeShellCommand(cmd1, (err: any, d: any) => {
        console.info("executeShellCommand1 : err : " + JSON.stringify(err), " data : " + JSON.stringify(d));
      })
      await sleep(500);
      var cmd2 = "mkdir -p /data/app/el2/100/base/com.ohos.hag.famanager/haps/entry/files";
      abilityDelegator.executeShellCommand(cmd2, (err: any, d: any) => {
        console.info("executeShellCommand2 : err : " + JSON.stringify(err), " data : " + JSON.stringify(d));

      })
      await sleep(500);
      var cmdum = "bm uninstall -n com.example.different.hmservice";
      abilityDelegator.executeShellCommand(cmdum, (err: any, d: any) => {
        console.info(TAG + " executeShellCommand : err : " + JSON.stringify(err), " data : " + JSON.stringify(d));
        done();
      })
    });

    afterEach(async function (done) {
      console.info("FreeInstall_FA_ConnectAbility_PA after each called");
      dataAssert = ""
      await sleep(1000);
      if ("FreeInstall_FA_ConnectAbility_PA_1100" === TAG) {
        var cmd14 = "bm uninstall -n com.ohos.hag.famanager";
        abilityDelegator.executeShellCommand(cmd14, (err: any, d: any) => {
          console.info("executeShellCommand14 : err : " + JSON.stringify(err), " data : " + JSON.stringify(d));
        })
      }
      await sleep(500);
      done();
    });

    /*
    * @tc.number  FreeInstall_FA_ConnectAbility_PA_0100
    * @tc.name    Deviceid is empty,atomic service does not exist locally
    * @tc.desc    Function test
    * @tc.level   0
    */
    it("FreeInstall_FA_ConnectAbility_PA_0100", 0, async function (done) {
      console.log("------------start FreeInstall_FA_ConnectAbility_PA_0100-------------");
      TAG = "FreeInstall_FA_ConnectAbility_PA_0100";
      var cmdmyapp7 = "cp data/test/ConnectFaMyApplication7.hap /data/app/el2/100/base/com.ohos.hag.famanager/" +
        "haps/entry/files";
      abilityDelegator.executeShellCommand(cmdmyapp7, (err: any, d: any) => {
        console.info(TAG + " executeShellCommand : err : " + JSON.stringify(err), " data : " + JSON.stringify(d));
      })
      setTimeout(async () => {
        var str1 = {
          "want": {
            "bundleName": "com.example.myapplication.hmservice",
            "abilityName": "com.example.myapplication.ServiceAbility",
          }
        };
        startService(TAG, str1);
        console.info(TAG + " SubscribeCallBack data: " + JSON.stringify(dataAssert));
        expect(dataAssert).assertEqual("onConnect");
        console.log("------------end FreeInstall_FA_ConnectAbility_PA_0100-------------");
      }, 4000);
      done();
    });

    /*
     * @tc.number  FreeInstall_FA_ConnectAbility_PA_0200
     * @tc.name    Deviceid is empty,atomic service exists locally
     * @tc.desc    Function test
     * @tc.level   0
     */
    it("FreeInstall_FA_ConnectAbility_PA_0200", 0, async function (done) {
      console.log("------------start FreeInstall_FA_ConnectAbility_PA_0200-------------");
      TAG = "FreeInstall_FA_ConnectAbility_PA_0200";
      var cmdapp9 = "bm install -p data/test/ConnectFaMyApplication9.hap";
      abilityDelegator.executeShellCommand(cmdapp9, (err: any, d: any) => {
        console.info(TAG + " executeShellCommand : err : " + JSON.stringify(err), " data : " + JSON.stringify(d));
      })
      setTimeout(async () => {
        var str2 = {
          "want": {
            "bundleName": "com.example.myapplication.hmservice",
            "abilityName": "com.example.myapplication.ServiceAbility2",
          }
        };
        startService(TAG, str2);
        console.info(TAG + " SubscribeCallBack data: " + JSON.stringify(dataAssert));
        expect(dataAssert).assertEqual("onConnect");
        console.log("------------end FreeInstall_FA_ConnectAbility_PA_0200-------------");
      }, 4000);
      done();
    });

    /*
     * @tc.number  FreeInstall_FA_ConnectAbility_PA_0300
     * @tc.name    The bundleName passed in is different from the local
     * @tc.desc    Function test
     * @tc.level   1
     */
    it("FreeInstall_FA_ConnectAbility_PA_0300", 0, async function (done) {
      console.log("------------start FreeInstall_FA_ConnectAbility_PA_0300-------------");
      TAG = "FreeInstall_FA_ConnectAbility_PA_0300";
      setTimeout(async () => {
        var str3 = {
          "want": {
            "bundleName": "com.example.myapplication.hmservice",
            "abilityName": "com.example.myapplication.ServiceAbility3",
          }
        };
        startService(TAG, str3);
        console.info(TAG + " SubscribeCallBack data: " + JSON.stringify(dataAssert));
        expect(dataAssert).assertEqual("onFailed");
        console.log("------------end FreeInstall_FA_ConnectAbility_PA_0300-------------");
      }, 4000);
      done();
    });

    /*
     * @tc.number  FreeInstall_FA_ConnectAbility_PA_0400
     * @tc.name    Do not pass flags, atomic service does not exist locally
     * @tc.desc    Function test
     * @tc.level   1
     */
    it("FreeInstall_FA_ConnectAbility_PA_0400", 0, async function (done) {
      console.log("------------start FreeInstall_FA_ConnectAbility_PA_0400-------------");
      setTimeout(async () => {
        TAG = "FreeInstall_FA_ConnectAbility_PA_0400";
        var str4 = {
          "want": {
            "bundleName": "com.example.myapplication.hmservice",
            "abilityName": "com.example.myapplication.ServiceAbility4",
          }
        };
        startService(TAG, str4);
        console.info(TAG + " SubscribeCallBack data: " + JSON.stringify(dataAssert));
        expect(dataAssert).assertEqual("onFailed");
        console.log("------------end FreeInstall_FA_ConnectAbility_PA_0400-------------");
      }, 4000);
      done();
    });

    /*
     * @tc.number  FreeInstall_FA_ConnectAbility_PA_0500
     * @tc.name    Do not pass flags, atomic service exists locally
     * @tc.desc    Function test
     * @tc.level   0
     */
    it("FreeInstall_FA_ConnectAbility_PA_0500", 0, async function (done) {
      console.log("------------start FreeInstall_FA_ConnectAbility_PA_0500-------------");
      TAG = "FreeInstall_FA_ConnectAbility_PA_0500";
      var cmdin = "bm install -p data/test/ConnectDifferentApplication.hap";
      abilityDelegator.executeShellCommand(cmdin, (err: any, d: any) => {
        console.info(TAG + " executeShellCommand : err : " + JSON.stringify(err), " data : " + JSON.stringify(d));
      })
      setTimeout(async () => {
        var str5 = {
          "want": {
            "bundleName": "com.example.myapplication.hmservice",
            "abilityName": "com.example.myapplication.ServiceAbility5",
          }
        };
        startService(TAG, str5);
        console.info(TAG + " SubscribeCallBack data: " + JSON.stringify(dataAssert));
        expect(dataAssert).assertEqual("onConnect");
        console.log("------------end FreeInstall_FA_ConnectAbility_PA_0500-------------");
      }, 4000);
      done();
    });

    /*
     * @tc.number  FreeInstall_FA_ConnectAbility_PA_0600
     * @tc.name    Incorrect deviceid passed in
     * @tc.desc    Function test
     * @tc.level   1
     */
    it("FreeInstall_FA_ConnectAbility_PA_0600", 0, async function (done) {
      console.log("------------start FreeInstall_FA_ConnectAbility_PA_0600-------------");
      TAG = "FreeInstall_FA_ConnectAbility_PA_0600";
      setTimeout(async () => {
        var str6 = {
          "want": {
            "bundleName": "com.example.myapplication.hmservice",
            "abilityName": "com.example.myapplication.ServiceAbility6",
          }
        };
        startService(TAG, str6);
        console.info(TAG + " SubscribeCallBack data: " + JSON.stringify(dataAssert));
        expect(dataAssert).assertEqual("onFailed");
        console.log("------------end FreeInstall_FA_ConnectAbility_PA_0600-------------");
      }, 4000);
      done();
    });

    /*
     * @tc.number  FreeInstall_FA_ConnectAbility_PA_0700
     * @tc.name    Incorrect bundleName passed in
     * @tc.desc    Function test
     * @tc.level   1
     */
    it("FreeInstall_FA_ConnectAbility_PA_0700", 0, async function (done) {
      console.log("------------start FreeInstall_FA_ConnectAbility_PA_0700-------------");
      TAG = "FreeInstall_FA_ConnectAbility_PA_0700";

      setTimeout(async () => {
        var str7 = {
          "want": {
            "bundleName": "com.example.myapplication.hmservice",
            "abilityName": "com.example.myapplication.ServiceAbility7",
          }
        };
        startService(TAG, str7);
        console.info(TAG + " SubscribeCallBack data: " + JSON.stringify(dataAssert));
        expect(dataAssert).assertEqual("onFailed");
        console.log("------------end FreeInstall_FA_ConnectAbility_PA_0700-------------");
      }, 4000);
      done();
    });

    /*
     * @tc.number  FreeInstall_FA_ConnectAbility_PA_0800
     * @tc.name    Pass in an empty abilityName
     * @tc.desc    Function test
     * @tc.level   1
     */
    it("FreeInstall_FA_ConnectAbility_PA_0800", 0, async function (done) {
      console.log("------------start FreeInstall_FA_ConnectAbility_PA_0800-------------");
      TAG = "FreeInstall_FA_ConnectAbility_PA_0800";

      setTimeout(async () => {
        var str8 = {
          "want": {
            "bundleName": "com.example.myapplication.hmservice",
            "abilityName": "com.example.myapplication.ServiceAbility8",
          }
        };
        startService(TAG, str8);
        console.info(TAG + " SubscribeCallBack data: " + JSON.stringify(dataAssert));
        expect(dataAssert).assertEqual("onFailed");
        console.log("------------end FreeInstall_FA_ConnectAbility_PA_0800-------------");
      }, 4000);
      done();
    });

    /*
     * @tc.number  FreeInstall_FA_ConnectAbility_PA_0900
     * @tc.name    No atomic service under path
     * @tc.desc    Function test
     * @tc.level   1
     */
    it("FreeInstall_FA_ConnectAbility_PA_0900", 0, async function (done) {
      console.log("------------start FreeInstall_FA_ConnectAbility_PA_0900-------------");
      TAG = "FreeInstall_FA_ConnectAbility_PA_0900";
      var cmdrm = "rm -r /data/app/el2/100/base/com.ohos.hag.famanager/haps/entry/files/*";
      abilityDelegator.executeShellCommand(cmdrm, (err: any, d: any) => {
        console.info(TAG + " executeShellCommand : err : " + JSON.stringify(err), " data : " + JSON.stringify(d));
      })

      setTimeout(async () => {
        await sleep(500);
        var str9 = {
          "want": {
            "bundleName": "com.example.myapplication.hmservice",
            "abilityName": "com.example.myapplication.ServiceAbility9",
          }
        };
        startService(TAG, str9);
        console.info(TAG + " SubscribeCallBack data: " + JSON.stringify(dataAssert));
        expect(dataAssert).assertEqual("onFailed");
        console.log("------------end FreeInstall_FA_ConnectAbility_PA_0900-------------");
      }, 4000);
      done();
    });

    /*
     * @tc.number  FreeInstall_FA_ConnectAbility_PA_1000
     * @tc.name    Incorrect moduleName passed in
     * @tc.desc    Function test
     * @tc.level   1
     */
    it("FreeInstall_FA_ConnectAbility_PA_1000", 0, async function (done) {
      console.log("------------start FreeInstall_FA_ConnectAbility_PA_1000-------------");
      TAG = "FreeInstall_FA_ConnectAbility_PA_1000";

      setTimeout(async () => {
        var str10 = {
          "want": {
            "bundleName": "com.example.myapplication.hmservice",
            "abilityName": "com.example.myapplication.ServiceAbility10",
          }
        };
        startService(TAG, str10);
        console.info(TAG + " SubscribeCallBack data: " + JSON.stringify(dataAssert));
        expect(dataAssert).assertEqual("onFailed");
        console.log("------------end FreeInstall_FA_ConnectAbility_PA_1000-------------");
      }, 4000);
      done();
    });

    /*
     * @tc.number  FreeInstall_FA_ConnectAbility_PA_1100
     * @tc.name    Pass in parameters
     * @tc.desc    Function test
     * @tc.level   0
     */
    it("FreeInstall_FA_ConnectAbility_PA_1100", 0, async function (done) {
      console.log("------------start FreeInstall_FA_ConnectAbility_PA_1100-------------");
      TAG = "FreeInstall_FA_ConnectAbility_PA_1100";
      var cmdmyapp8 = "cp data/test/ConnectFaMyApplication8.hap /data/app/el2/100/base/com.ohos.hag.famanager/" +
        "haps/entry/files";
      abilityDelegator.executeShellCommand(cmdmyapp8, (err: any, d: any) => {
        console.info(TAG + " executeShellCommand : err : " + JSON.stringify(err), " data : " + JSON.stringify(d));
      })

      setTimeout(async () => {
        var str11 = {
          "want": {
            "bundleName": "com.example.myapplication.hmservice",
            "abilityName": "com.example.myapplication.ServiceAbility11",
          }
        };
        startService(TAG, str11);
        console.info(TAG + " SubscribeCallBack data: " + JSON.stringify(dataAssert));
        expect(dataAssert).assertEqual("onConnect");
        console.log("------------end FreeInstall_FA_ConnectAbility_PA_1100-------------");
      }, 4000);
      done();
    });
  }
  )
}

