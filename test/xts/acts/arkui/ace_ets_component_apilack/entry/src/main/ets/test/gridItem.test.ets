
/**
 * Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import router from '@system.router';
import {describe, beforeAll, beforeEach, afterEach, afterAll, it, expect} from "hypium/index"
import Utils from './Utils.ets'
import events_emitter from '@ohos.events.emitter';

export default function gridItemOnSelectJsunit() {
  describe('gridItemOnSelectTest', function () {
    beforeAll(async function (done) {
      console.info("flex beforeEach start");
      let options = {
        uri: 'pages/gridItem',
      }
      try {
        router.clear();
        let pages = router.getState();
        console.info("get gridItem state success " + JSON.stringify(pages));
        if (!("gridItem" == pages.name)) {
          console.info("get gridItem state success " + JSON.stringify(pages.name));
          let result = await router.push(options);
          await Utils.sleep(2000);
          console.info("push gridItem page success " + JSON.stringify(result));
        }
      } catch (err) {
        console.error("push gridItem page error: " + err);
      }
      done()
    });

    afterEach(async function () {
      await Utils.sleep(1000);
      console.info("gridItemOnSelect after each called");
    });


    it('testgridItemOnSelect0001', 0, async function (done) {
      console.info('testgridItemOnSelect testgridItemOnSelect0001 START');
      await Utils.sleep(2000);
      let callback = (indexEvent) => {
        console.info("onSelect_0001 get state result is: " + JSON.stringify(indexEvent));
        expect(indexEvent.data.STATUS).assertEqual(true);
        done();
      }
      let indexEvent = {
        eventId: 60207,
        priority: events_emitter.EventPriority.LOW
      }
      sendEventByKey('onSelected', 10, "")
      try {
        events_emitter.on(indexEvent, callback);
      } catch (err) {
        console.info("onSelect_0001 on events_emitter err : " + JSON.stringify(err));
      }
      console.info('testgridItemOnSelect0001 END');
      done();
    });

  })
}
