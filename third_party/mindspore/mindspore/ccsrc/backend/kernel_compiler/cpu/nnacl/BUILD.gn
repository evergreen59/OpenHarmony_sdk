# Copyright 2022 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================

import("//build/ohos.gni")
ohos_source_set("nnacl_o") {
  sources = [
    "assembly/opt/MatmulDpInt8.S",
    "assembly/opt/MatmulDpInt8Opt.S",
    "assembly/opt/MatmulOptR4Int8.S",
    "base/arithmetic_base.c",
    "base/batch_to_space_base.c",
    "base/broadcast_to.c",
    "base/concat_base.c",
    "base/conv1x1_base.c",
    "base/conv_common_base.c",
    "base/depth_to_space_base.c",
    "base/fill_base.c",
    "base/gather_base.c",
    "base/minimal_filtering_generator.c",
    "base/slice_base.c",
    "base/space_to_depth_base.c",
    "base/split_base.c",
    "base/split_with_over_lap_base.c",
    "base/stack_base.c",
    "base/tile_base.c",
    "base/transpose_base.c",
    "base/unsorted_segment_sum_base.c",
    "base/unstack_base.c",
    "common_func.c",
    "fp32/activation_fp32.c",
    "fp32/adam_fp32.c",
    "fp32/add_fp32.c",
    "fp32/adder_fp32.c",
    "fp32/arg_min_max_fp32.c",
    "fp32/arithmetic_compare_fp32.c",
    "fp32/arithmetic_fp32.c",
    "fp32/arithmetic_self_fp32.c",
    "fp32/attention_fp32.c",
    "fp32/batchnorm_fp32.c",
    "fp32/common_func_fp32.c",
    "fp32/conv_1x1_x86_fp32.c",
    "fp32/conv_common_fp32.c",
    "fp32/conv_depthwise_fp32.c",
    "fp32/conv_winograd_fp32.c",
    "fp32/crop_fp32.c",
    "fp32/cumsum_fp32.c",
    "fp32/deconv_fp32.c",
    "fp32/deconv_winograd_fp32.c",
    "fp32/detection_post_process_fp32.c",
    "fp32/div_fp32.c",
    "fp32/embedding_lookup_fp32.c",
    "fp32/exp_fp32.c",
    "fp32/gatherNd_fp32.c",
    "fp32/gru_fp32.c",
    "fp32/instance_norm_fp32.c",
    "fp32/invert_permutation_fp32.c",
    "fp32/l2_norm_fp32.c",
    "fp32/layer_norm_fp32.c",
    "fp32/local_response_norm_fp32.c",
    "fp32/log_softmax_fp32.c",
    "fp32/lstm_fp32.c",
    "fp32/matmul_fp32.c",
    "fp32/mul_fp32.c",
    "fp32/one_hot_fp32.c",
    "fp32/pack_fp32.c",
    "fp32/pad_fp32.c",
    "fp32/pooling_fp32.c",
    "fp32/power_fp32.c",
    "fp32/prelu_fp32.c",
    "fp32/ragged_range_fp32.c",
    "fp32/reduce_fp32.c",
    "fp32/resize_fp32.c",
    "fp32/reverse_fp32.c",
    "fp32/reverse_sequence_fp32.c",
    "fp32/rmsprop_fp32.c",
    "fp32/roi_pooling_fp32.c",
    "fp32/scale_fp32.c",
    "fp32/scatter_nd_fp32.c",
    "fp32/softmax_fp32.c",
    "fp32/space_to_batch_fp32.c",
    "fp32/sparse_to_dense_fp32.c",
    "fp32/splice_fp32.c",
    "fp32/squared_difference.c",
    "fp32/strided_slice_fp32.c",
    "fp32/sub_fp32.c",
    "fp32/topk_fp32.c",
    "fp32/transpose_fp32.c",
    "fp32/unique_fp32.c",
    "fp32/where_fp32.c",
    "fp32/winograd_avx.c",
    "fp32/winograd_transform.c",
    "fp32/winograd_utils.c",
    "fp32_grad/activation_grad.c",
    "fp32_grad/arithmetic_grad.c",
    "fp32_grad/batch_norm.c",
    "fp32_grad/binary_cross_entropy.c",
    "fp32_grad/binary_cross_entropy_grad.c",
    "fp32_grad/convolution_grad_filter.c",
    "fp32_grad/convolution_grad_input.c",
    "fp32_grad/dropout_grad.c",
    "fp32_grad/gemm.c",
    "fp32_grad/layernorm_grad.c",
    "fp32_grad/pack_ext.c",
    "fp32_grad/pooling_grad.c",
    "fp32_grad/reduce_grad.c",
    "fp32_grad/resize_grad.c",
    "fp32_grad/softmax.c",
    "fp32_grad/softmax_grad.c",
    "fp32_grad/strided_slice_grad.c",
    "infer/adam_infer.c",
    "infer/add_sub_grad_infer.c",
    "infer/addn_infer.c",
    "infer/affine_infer.c",
    "infer/apply_momentum_infer.c",
    "infer/argmin_max_infer.c",
    "infer/arithmetic_compare_infer.c",
    "infer/arithmetic_grad_infer.c",
    "infer/arithmetic_infer.c",
    "infer/assert_op_infer.c",
    "infer/assign_add_infer.c",
    "infer/assign_infer.c",
    "infer/attention_infer.c",
    "infer/audio_spectrogram_infer.c",
    "infer/batch_to_space_infer.c",
    "infer/bias_grad_infer.c",
    "infer/binary_cross_entropy_infer.c",
    "infer/bn_grad_infer.c",
    "infer/broadcast_to_infer.c",
    "infer/cast_infer.c",
    "infer/common_infer.c",
    "infer/concat_infer.c",
    "infer/constant_of_shape_infer.c",
    "infer/control/tensor_array_infer.c",
    "infer/control/tensor_array_read_infer.c",
    "infer/control/tensor_array_write_infer.c",
    "infer/control/tensorlist_fromtensor_infer.c",
    "infer/control/tensorlist_getitem_infer.c",
    "infer/control/tensorlist_reserve_infer.c",
    "infer/control/tensorlist_setitem_infer.c",
    "infer/control/tensorlist_stack_infer.c",
    "infer/conv2d_grad_filter_infer.c",
    "infer/conv2d_grad_input_infer.c",
    "infer/conv2d_infer.c",
    "infer/crop_and_resize_infer.c",
    "infer/crop_infer.c",
    "infer/cumsum_infer.c",
    "infer/deconv2d_infer.c",
    "infer/depth_to_space_infer.c",
    "infer/depthwise_conv2d_infer.c",
    "infer/detection_post_process_infer.c",
    "infer/dropout_grad_infer.c",
    "infer/dropout_infer.c",
    "infer/embedding_lookup_infer.c",
    "infer/expand_dims_infer.c",
    "infer/fft_imag_infer.c",
    "infer/fft_real_infer.c",
    "infer/fill_infer.c",
    "infer/flatten_grad_infer.c",
    "infer/flatten_infer.c",
    "infer/full_connection_infer.c",
    "infer/fused_batchnorm_infer.c",
    "infer/gather_infer.c",
    "infer/gather_nd_infer.c",
    "infer/glu_infer.c",
    "infer/group_conv2d_grad_input_infer.c",
    "infer/gru_infer.c",
    "infer/infer_register.c",
    "infer/invert_permutation_infer.c",
    "infer/layer_norm_grad_infer.c",
    "infer/layer_norm_infer.c",
    "infer/lin_space_infer.c",
    "infer/log_softmax_infer.c",
    "infer/lstm_grad_infer.c",
    "infer/lstm_infer.c",
    "infer/matmul_infer.c",
    "infer/max_min_grad_infer.c",
    "infer/mean_infer.c",
    "infer/mfcc_infer.c",
    "infer/non_max_suppression_infer.c",
    "infer/one_hot_infer.c",
    "infer/pad_infer.c",
    "infer/partial_infer.c",
    "infer/pooling_grad_infer.c",
    "infer/pooling_infer.c",
    "infer/power_infer.c",
    "infer/prior_box_infer.c",
    "infer/quant_dtype_cast_infer.c",
    "infer/ragged_range_infer.c",
    "infer/random_standard_normal_infer.c",
    "infer/range_infer.c",
    "infer/rank_infer.c",
    "infer/reduce_infer.c",
    "infer/reshape_infer.c",
    "infer/resize_grad_infer.c",
    "infer/resize_infer.c",
    "infer/rfft_infer.c",
    "infer/roi_pooling_infer.c",
    "infer/scatter_nd_infer.c",
    "infer/scatter_nd_update_infer.c",
    "infer/select_infer.c",
    "infer/sgd_infer.c",
    "infer/shape_infer.c",
    "infer/size_infer.c",
    "infer/slice_infer.c",
    "infer/softmax_cross_entropy_infer.c",
    "infer/softmax_infer.c",
    "infer/space_to_batch_infer.c",
    "infer/space_to_batch_nd_infer.c",
    "infer/space_to_depth_infer.c",
    "infer/sparse_softmax_cross_entropy_with_logits_infer.c",
    "infer/sparse_to_dense_infer.c",
    "infer/splice_infer.c",
    "infer/split_infer.c",
    "infer/split_with_over_lap_infer.c",
    "infer/squeeze_infer.c",
    "infer/stack_infer.c",
    "infer/strided_slice_grad_infer.c",
    "infer/strided_slice_infer.c",
    "infer/string/custom_extract_features_infer.c",
    "infer/string/custom_normalize_infer.c",
    "infer/string/custom_predict_infer.c",
    "infer/string/hashtable_lookup_infer.c",
    "infer/string/lsh_projection_infer.c",
    "infer/string/skip_gram_infer.c",
    "infer/tile_infer.c",
    "infer/topk_infer.c",
    "infer/transpose_infer.c",
    "infer/uniform_real_infer.c",
    "infer/unique_infer.c",
    "infer/unsorted_segment_sum_infer.c",
    "infer/unsqueeze_infer.c",
    "infer/unstack_infer.c",
    "infer/where_infer.c",
    "int8/add_int8.c",
    "int8/arg_min_max_int8.c",
    "int8/arithmetic_int8.c",
    "int8/arithmetic_self_int8.c",
    "int8/batch_to_space_int8.c",
    "int8/batchnorm_int8.c",
    "int8/common_func_int8.c",
    "int8/concat_int8.c",
    "int8/conv1x1_int8.c",
    "int8/conv3x3_int8.c",
    "int8/conv_depthwise_int8.c",
    "int8/conv_int8.c",
    "int8/crop_int8.c",
    "int8/deconv_int8.c",
    "int8/depth_to_space_int8.c",
    "int8/div_int8.c",
    "int8/fixed_point.c",
    "int8/gatherNd_int8.c",
    "int8/gather_int8.c",
    "int8/hswish_int8.c",
    "int8/l2_norm_int8.c",
    "int8/layer_norm_int8.c",
    "int8/leaky_relu_int8.c",
    "int8/matmul_int8.c",
    "int8/mul_int8.c",
    "int8/pack_int8.c",
    "int8/pad_int8.c",
    "int8/pooling_int8.c",
    "int8/power_int8.c",
    "int8/quant_dtype_cast_int8.c",
    "int8/quantize.c",
    "int8/reduce_int8.c",
    "int8/relux_int8.c",
    "int8/reshape_int8.c",
    "int8/resize_int8.c",
    "int8/scale_int8.c",
    "int8/sigmoid_int8.c",
    "int8/slice_int8.c",
    "int8/softmax_int8.c",
    "int8/space_to_batch_int8.c",
    "int8/split_int8.c",
    "int8/squeeze_int8.c",
    "int8/sub_int8.c",
    "int8/tanh_int8.c",
    "int8/topk_int8.c",
    "int8/transpose_int8.c",
    "int8/unsqueeze_int8.c",
    "nnacl_common.c",
    "nnacl_utils.c",
  ]

  if (target_cpu == "arm") {
    sources += [
      "assembly/arm32/ConvDw3x3Int8BorderPixel.S",
      "assembly/arm32/ConvDwFp32Border.S",
      "assembly/arm32/ConvDwFp32Center.S",
      "assembly/arm32/ConvDwFp32Row.S",
      "assembly/arm32/ConvDwInt8Center.S",
      "assembly/arm32/ConvDwInt8PostAlign4.S",
      "assembly/arm32/ConvDwInt8PostAlign4PerChannel.S",
      "assembly/arm32/ConvDwInt8Row.S",
      "assembly/arm32/DeconvDwFp32Center.S",
      "assembly/arm32/DeconvDwInt8Center.S",
      "assembly/arm32/DeconvDwInt8Post.S",
      "assembly/arm32/IndirectGemmInt16to32_8x4.S",
      "assembly/arm32/IndirectGemmInt8_2x4.S",
      "assembly/arm32/MatVecMulFp32.S",
      "assembly/arm32/MatmulFp32.S",
      "assembly/arm32/MatmulFp32Opt.S",
      "assembly/arm32/MatmulFp32Opt12x4.S",
      "assembly/arm32/MatmulInt8.S",
      "assembly/arm32/MatmulInt8Opt.S",
      "assembly/arm32/MatmulWinogradFp32.S",
      "assembly/arm32/PostFuncBiasReluC4.S",
      "assembly/arm32/PostFuncBiasReluC8.S",
      "assembly/arm32/PreSum4x16Int8Peroc.S",
      "assembly/arm32/PreSum4x16Int8Pert.S",
      "assembly/arm32/TiledC4MatmulFp32.S",
      "assembly/arm32/WinogradTransLeft.S",
      "assembly/arm32/WinogradTransRight.S",
    ]
  } else if (target_cpu == "arm64") {
    sources += [
      "assembly/arm64/AdderFp32.S",
      "assembly/arm64/ConvDw3x3Fp32Corner.S",
      "assembly/arm64/ConvDw3x3Fp32Horizontal.S",
      "assembly/arm64/ConvDw3x3Fp32Stride1.S",
      "assembly/arm64/ConvDw3x3Fp32Stride2.S",
      "assembly/arm64/ConvDw3x3Fp32Vertical.S",
      "assembly/arm64/ConvDw3x3Int8.S",
      "assembly/arm64/ConvDw3x3Int8Corner.S",
      "assembly/arm64/ConvDw3x3Int8Horizontal.S",
      "assembly/arm64/ConvDw3x3Int8Stride2.S",
      "assembly/arm64/ConvDw3x3Int8Vertical.S",
      "assembly/arm64/ConvDw3x3Line.S",
      "assembly/arm64/ConvDwFp32Border.S",
      "assembly/arm64/ConvDwFp32Center.S",
      "assembly/arm64/ConvDwFp32Indirect3x3.S",
      "assembly/arm64/ConvDwFp32Indirect5x5.S",
      "assembly/arm64/ConvDwFp32Row.S",
      "assembly/arm64/ConvDwInt8Center.S",
      "assembly/arm64/ConvDwInt8PostAlign4.S",
      "assembly/arm64/ConvDwInt8PostAlign4PerChannel.S",
      "assembly/arm64/ConvDwInt8Row.S",
      "assembly/arm64/ConvFp32Center.S",
      "assembly/arm64/DeconvDwFp32Border.S",
      "assembly/arm64/DeconvDwFp32Center.S",
      "assembly/arm64/DeconvDwInt8Center.S",
      "assembly/arm64/DeconvDwInt8Post.S",
      "assembly/arm64/IndirectGemmInt16to32_8x4.S",
      "assembly/arm64/MatVecMulFp32.S",
      "assembly/arm64/MatmulFp32.S",
      "assembly/arm64/MatmulFp32Opt.S",
      "assembly/arm64/MatmulFp32OptRow12.S",
      "assembly/arm64/MatmulFp32OptRow4.S",
      "assembly/arm64/MatmulFp32OptRow8.S",
      "assembly/arm64/MatmulInt8.S",
      "assembly/arm64/MatmulInt8Opt.S",
      "assembly/arm64/MatmulR4Int8.S",
      "assembly/arm64/MatmulWinogradFp32.S",
      "assembly/arm64/PostFuncBiasReluC4.S",
      "assembly/arm64/PostFuncBiasReluC8.S",
      "assembly/arm64/PostFuncInt8C4Neon64.S",
      "assembly/arm64/PreSum4x16Int8Peroc.S",
      "assembly/arm64/PreSum4x16Int8Pert.S",
      "assembly/arm64/TiledC4MatmulFp32.S",
      "assembly/arm64/WinogradTransLeft.S",
      "assembly/arm64/WinogradTransRight.S",
      "assembly/fp16/ConvDwFp16Border.S",
      "assembly/fp16/ConvDwFp16Center.S",
      "assembly/fp16/ConvDwFp16Row.S",
      "assembly/fp16/DeconvDwFp16Border.S",
      "assembly/fp16/DeconvDwFp16Center.S",
      "assembly/fp16/Float16ToFloat32.S",
      "assembly/fp16/Float32ToFloat16.S",
      "assembly/fp16/MatVecMulFp16.S",
      "assembly/fp16/Matmul12X16Fp16.S",
      "assembly/fp16/MatmulBaseFp16Neon.S",
      "assembly/fp16/MatmulFp16.S",
      "assembly/fp16/MatmulFp16Opt.S",
      "assembly/fp16/MatmulWinogradFp16.S",
      "assembly/fp16/PostFuncBiasReluC4Fp16.S",
      "assembly/fp16/PostFuncBiasReluC8Fp16.S",
      "assembly/fp16/TiledC4MatmulFp16.S",
      "assembly/fp16/VecMatmulFp16.S",
      "assembly/fp16/WinogradTransLeftFp16.S",
      "assembly/fp16/WinogradTransRightFp16.S",
      "fp16/activation_fp16.c",
      "fp16/arg_min_max_fp16.c",
      "fp16/arithmetic_fp16.c",
      "fp16/arithmetic_self_fp16.c",
      "fp16/batchnorm_fp16.c",
      "fp16/common_func_fp16.c",
      "fp16/conv_depthwise_fp16.c",
      "fp16/conv_fp16.c",
      "fp16/crop_fp16.c",
      "fp16/deconv_fp16.c",
      "fp16/deconv_winograd_fp16.c",
      "fp16/exp_fp16.c",
      "fp16/fill_fp16.c",
      "fp16/gru_fp16.c",
      "fp16/instance_norm_fp16.c",
      "fp16/layer_norm_fp16.c",
      "fp16/log_softmax_fp16.c",
      "fp16/lstm_fp16.c",
      "fp16/matmul_fp16.c",
      "fp16/matrix_fp16.c",
      "fp16/one_hot_fp16.c",
      "fp16/pack_fp16.c",
      "fp16/pad_fp16.c",
      "fp16/pooling_fp16.c",
      "fp16/power_fp16.c",
      "fp16/quant_dtype_cast_fp16.c",
      "fp16/ragged_range_fp16.c",
      "fp16/reduce_fp16.c",
      "fp16/scale_fp16.c",
      "fp16/softmax_fp16.c",
      "fp16/transpose_fp16.c",
      "fp16/winograd_transform_fp16.c",
      "fp16/winograd_utils_fp16.c",
      "fp16_grad/activation_grad.c",
      "fp16_grad/arithmetic_grad.c",
      "fp16_grad/arithmetic_self_grad.c",
      "fp16_grad/batch_norm.c",
      "fp16_grad/convolution_grad_filter.c",
      "fp16_grad/convolution_grad_input.c",
      "fp16_grad/dropout_grad.c",
      "fp16_grad/gemm_fp16.c",
      "fp16_grad/layernorm_grad.c",
      "fp16_grad/pack_fp16_ext.c",
      "fp16_grad/pooling_grad.c",
      "fp16_grad/resize_grad.c",
      "fp16_grad/strided_slice_grad.c",
      "fp16_grad/unsorted_segment_sum.c",
    ]
  }

  include_dirs = [
    "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
    "../",
  ]

  defines = [ "MS_COMPILE_OHOS" ]

  if (target_cpu == "arm") {
    defines += [
      "ENABLE_ARM",
      "ENABLE_ARM32",
      "ENABLE_NEON",
    ]
  } else if (target_cpu == "arm64") {
    defines += [
      "ENABLE_ARM",
      "ENABLE_ARM64",
      "ENABLE_NEON",
      "ENABLE_FP16",
    ]
  }

  cflags_c = [
    "-march=armv8.2-a+dotprod+fp16",
    "-fomit-frame-pointer",
    "-fstrict-aliasing",
    "-ffast-math",
  ]
  disable_android = true
  if (disable_android) {
    cflags = [
      "-UANDROID",
      "-U__ANDROID__",
      "-U__ANDROID_API__",
    ]
    cflags_cc = [
      "-UANDROID",
      "-U__ANDROID__",
      "-U__ANDROID_API__",
    ]
  }
  asmflags = [ "-march=armv8.2-a+dotprod+fp16" ]

  part_name = "mindspore"
}
